
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000c42  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800154  00800154  00000d2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d5  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfa  00000000  00000000  000029d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef2  00000000  00000000  000037cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  000046c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000808  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac7  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00005e97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_18>
  4c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  9e:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_Start>:
#include "DHT11.h"


uint8_t data[5];
void DHT11_Start(){
	DDRC |= (1<<DHT11_PIN);				// Bus de salida para mandar la señal de inicio
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<DHT11_PIN);			// Cambia el nivel del bus a bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 ee       	ldi	r24, 0xE0	; 224
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_Start+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_Start+0x1c>
  c2:	00 00       	nop
	_delay_ms(18);						// Tiene que esperar al menos 18ms para que el sensor lo detecte
	PORTC |= (1<<DHT11_PIN);			// Vuelve a subir el nivel del bus a alto - deberia esperar 20-40microsegundos pero calculo q eso lo hace el programa?
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	08 95       	ret

000000cc <DHT11_Response>:
}

void DHT11_Response(){
	DDRC &= ~(1<<DHT11_PIN);			// Bus de entrada para recibir señal de respuesta
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	87 b9       	out	0x07, r24	; 7
	while(PINC & (1<<DHT11_PIN));		// La señal de respuesta del DHT11 empieza en bajo, por lo que espera a que la misma empiece
  d2:	30 99       	sbic	0x06, 0	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <DHT11_Response+0x6>
	while((PINC & (1<<DHT11_PIN))==0);	// Mientras el bus este en nivel bajo, espera -> Mientras se esté transmitiendo la señal de respuesta espera (aprox 80 microsegundos)
  d6:	30 9b       	sbis	0x06, 0	; 6
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <DHT11_Response+0xa>
	while(PINC & (1<<DHT11_PIN));		// El DHT sube el nivel y lo mantiene por 80 us, despues empieza la transmision de datos.
  da:	30 99       	sbic	0x06, 0	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <DHT11_Response+0xe>
	//sale del while 
}
  de:	08 95       	ret

000000e0 <DHT11_Read_byte>:

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
	for(int i=0;i<8;i++){						//por cada bit recibido
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
	while(PINC & (1<<DHT11_PIN));		// El DHT sube el nivel y lo mantiene por 80 us, despues empieza la transmision de datos.
	//sale del while 
}

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0;i<8;i++){						//por cada bit recibido
  e6:	12 c0       	rjmp	.+36     	; 0x10c <DHT11_Read_byte+0x2c>
		while((PINC & (1<<DHT11_PIN)) == 0);	//Se mantiene durante 50 us en el while esperando a que termine la señal de inicio de transmision de bit y el bus queda en ALTO
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <DHT11_Read_byte+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	9a e9       	ldi	r25, 0x9A	; 154
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <DHT11_Read_byte+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <DHT11_Read_byte+0x14>
		_delay_us(29);							//Espera durante 29 microsegundos						
		if(PINC & (1<<DHT11_PIN)){				//Si al salir del delay el bus sigue en alto, quiere decir que es un 1.
  f4:	30 9b       	sbis	0x06, 0	; 6
  f6:	07 c0       	rjmp	.+14     	; 0x106 <DHT11_Read_byte+0x26>
			data = ((data<<1) | 1);
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	81 60       	ori	r24, 0x01	; 1
			while(PINC & (1<<DHT11_PIN));			//Espera a que pase la señal en ALTO del 1 (estará aprox 40 microsegundos esperando) -> probar como queda en el IF del 1
 100:	30 99       	sbic	0x06, 0	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <DHT11_Read_byte+0x20>
 104:	01 c0       	rjmp	.+2      	; 0x108 <DHT11_Read_byte+0x28>
	
		}
		else{									//Si al salir del delay el bus vuelve a estar en BAJO, entonces pasaron los 26-28 microsegundos de ALTO que indicarian un 0
			data = (data<<1);
 106:	88 0f       	add	r24, r24
	//sale del while 
}

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
	for(int i=0;i<8;i++){						//por cada bit recibido
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	28 30       	cpi	r18, 0x08	; 8
 10e:	31 05       	cpc	r19, r1
 110:	5c f3       	brlt	.-42     	; 0xe8 <DHT11_Read_byte+0x8>
		else{									//Si al salir del delay el bus vuelve a estar en BAJO, entonces pasaron los 26-28 microsegundos de ALTO que indicarian un 0
			data = (data<<1);
		}
	}
	return data;
}
 112:	08 95       	ret

00000114 <DHT11_Read_data>:

uint8_t DHT11_Read_data(char* hum, char* temp){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	f8 2e       	mov	r15, r24
 122:	e9 2e       	mov	r14, r25
 124:	16 2f       	mov	r17, r22
 126:	07 2f       	mov	r16, r23
	uint8_t checksum = 0;
	DHT11_Start();					//manda señal de inicio
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Start>
	DHT11_Response();				//espera señal de respuesta del sensor
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <DHT11_Response>
	//Inicio de transmisión de datos
	data[0] = DHT11_Read_byte();	//humedad int
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 134:	c5 e8       	ldi	r28, 0x85	; 133
 136:	d2 e0       	ldi	r29, 0x02	; 2
 138:	88 83       	st	Y, r24
	data[1] = DHT11_Read_byte();	//humedad dec
 13a:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 13e:	89 83       	std	Y+1, r24	; 0x01
	data[2] = DHT11_Read_byte();	//temp int
 140:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 144:	8a 83       	std	Y+2, r24	; 0x02
	data[3] = DHT11_Read_byte();	//temp dec
 146:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 14a:	8b 83       	std	Y+3, r24	; 0x03
	data[4] = DHT11_Read_byte();	//checksum
 14c:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 150:	8c 83       	std	Y+4, r24	; 0x04
	//Fin de trama 5*8bits = 40bits
	
	
	DDRC |= 1<<DHT11_PIN;			//Se configura el pin como salida
 152:	97 b1       	in	r25, 0x07	; 7
 154:	91 60       	ori	r25, 0x01	; 1
 156:	97 b9       	out	0x07, r25	; 7
	//PORTC |= 1<<DHT11_PIN;			//Se pone el nivel del bus en ALTO (free)
	
	//chequeo de datos recibidos 
	checksum = data[0] + data[1] + data[2] + data[3];
 158:	38 81       	ld	r19, Y
 15a:	49 81       	ldd	r20, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	2b 81       	ldd	r18, Y+3	; 0x03
 160:	53 2f       	mov	r21, r19
 162:	54 0f       	add	r21, r20
 164:	95 0f       	add	r25, r21
 166:	92 0f       	add	r25, r18
 
	if (checksum == data[4]){
 168:	98 13       	cpse	r25, r24
 16a:	24 c0       	rjmp	.+72     	; 0x1b4 <DHT11_Read_data+0xa0>
		sprintf(hum, "%2d.%1d",data[0],data[1]);
 16c:	1f 92       	push	r1
 16e:	4f 93       	push	r20
 170:	1f 92       	push	r1
 172:	3f 93       	push	r19
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d1 e0       	ldi	r29, 0x01	; 1
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0e 94 35 03 	call	0x66a	; 0x66a <sprintf>
		sprintf(temp, "%2d.%1d",data[2],data[3]);
 184:	e5 e8       	ldi	r30, 0x85	; 133
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	93 81       	ldd	r25, Z+3	; 0x03
 18a:	82 81       	ldd	r24, Z+2	; 0x02
 18c:	1f 92       	push	r1
 18e:	9f 93       	push	r25
 190:	1f 92       	push	r1
 192:	8f 93       	push	r24
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	0e 94 35 03 	call	0x66a	; 0x66a <sprintf>
		return 1;
 1a0:	8d b7       	in	r24, 0x3d	; 61
 1a2:	9e b7       	in	r25, 0x3e	; 62
 1a4:	40 96       	adiw	r24, 0x10	; 16
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	9e bf       	out	0x3e, r25	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	8d bf       	out	0x3d, r24	; 61
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DHT11_Read_data+0xa2>
	}
	return 0;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
	
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <Update_Terminal>:
	}
}

//-----------------------BACKGROUND------------------------------

void Update_Terminal(){
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	ce 53       	subi	r28, 0x3E	; 62
 1d6:	d1 40       	sbci	r29, 0x01	; 1
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
	char resultado[BUFFER_SIZE];
	// Variables para almacenar los datos de humedad y temperatura
	char hum[6],temp[6];

	uint8_t year, month, day, hour, minute, second;
	RTC_getDateTime(&year, &month, &day, &hour, &minute, &second);      
 1e2:	ce 01       	movw	r24, r28
 1e4:	82 5c       	subi	r24, 0xC2	; 194
 1e6:	9e 4f       	sbci	r25, 0xFE	; 254
 1e8:	7c 01       	movw	r14, r24
 1ea:	8e 01       	movw	r16, r28
 1ec:	03 5c       	subi	r16, 0xC3	; 195
 1ee:	1e 4f       	sbci	r17, 0xFE	; 254
 1f0:	9e 01       	movw	r18, r28
 1f2:	24 5c       	subi	r18, 0xC4	; 196
 1f4:	3e 4f       	sbci	r19, 0xFE	; 254
 1f6:	ae 01       	movw	r20, r28
 1f8:	45 5c       	subi	r20, 0xC5	; 197
 1fa:	5e 4f       	sbci	r21, 0xFE	; 254
 1fc:	be 01       	movw	r22, r28
 1fe:	66 5c       	subi	r22, 0xC6	; 198
 200:	7e 4f       	sbci	r23, 0xFE	; 254
 202:	05 97       	sbiw	r24, 0x05	; 5
 204:	0e 94 45 02 	call	0x48a	; 0x48a <RTC_getDateTime>
	        
	sprintf(resultado, "\nFecha: %02d/%02d/%02d Hora: %02d:%02d:%02d\n\r", day, month, year, hour, minute, second);
 208:	c2 5c       	subi	r28, 0xC2	; 194
 20a:	de 4f       	sbci	r29, 0xFE	; 254
 20c:	88 81       	ld	r24, Y
 20e:	ce 53       	subi	r28, 0x3E	; 62
 210:	d1 40       	sbci	r29, 0x01	; 1
 212:	1f 92       	push	r1
 214:	8f 93       	push	r24
 216:	c3 5c       	subi	r28, 0xC3	; 195
 218:	de 4f       	sbci	r29, 0xFE	; 254
 21a:	88 81       	ld	r24, Y
 21c:	cd 53       	subi	r28, 0x3D	; 61
 21e:	d1 40       	sbci	r29, 0x01	; 1
 220:	1f 92       	push	r1
 222:	8f 93       	push	r24
 224:	c4 5c       	subi	r28, 0xC4	; 196
 226:	de 4f       	sbci	r29, 0xFE	; 254
 228:	88 81       	ld	r24, Y
 22a:	cc 53       	subi	r28, 0x3C	; 60
 22c:	d1 40       	sbci	r29, 0x01	; 1
 22e:	1f 92       	push	r1
 230:	8f 93       	push	r24
 232:	c7 5c       	subi	r28, 0xC7	; 199
 234:	de 4f       	sbci	r29, 0xFE	; 254
 236:	88 81       	ld	r24, Y
 238:	c9 53       	subi	r28, 0x39	; 57
 23a:	d1 40       	sbci	r29, 0x01	; 1
 23c:	1f 92       	push	r1
 23e:	8f 93       	push	r24
 240:	c6 5c       	subi	r28, 0xC6	; 198
 242:	de 4f       	sbci	r29, 0xFE	; 254
 244:	88 81       	ld	r24, Y
 246:	ca 53       	subi	r28, 0x3A	; 58
 248:	d1 40       	sbci	r29, 0x01	; 1
 24a:	1f 92       	push	r1
 24c:	8f 93       	push	r24
 24e:	c5 5c       	subi	r28, 0xC5	; 197
 250:	de 4f       	sbci	r29, 0xFE	; 254
 252:	88 81       	ld	r24, Y
 254:	cb 53       	subi	r28, 0x3B	; 59
 256:	d1 40       	sbci	r29, 0x01	; 1
 258:	1f 92       	push	r1
 25a:	8f 93       	push	r24
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	0c 53       	subi	r16, 0x3C	; 60
 266:	11 40       	sbci	r17, 0x01	; 1
 268:	1f 93       	push	r17
 26a:	0f 93       	push	r16
 26c:	0e 94 35 03 	call	0x66a	; 0x66a <sprintf>
	// Leer los valores de humedad y temperatura del DHT11
	DHT11_Read_data(hum, temp);
 270:	be 01       	movw	r22, r28
 272:	6d 5c       	subi	r22, 0xCD	; 205
 274:	7e 4f       	sbci	r23, 0xFE	; 254
 276:	ce 01       	movw	r24, r28
 278:	83 5d       	subi	r24, 0xD3	; 211
 27a:	9e 4f       	sbci	r25, 0xFE	; 254
 27c:	0e 94 8a 00 	call	0x114	; 0x114 <DHT11_Read_data>
	
	// Transmitir los valores de humedad y temperatura por UART
	strcat(resultado,"Humedad: ");
 280:	d8 01       	movw	r26, r16
 282:	0d 90       	ld	r0, X+
 284:	00 20       	and	r0, r0
 286:	e9 f7       	brne	.-6      	; 0x282 <Update_Terminal+0xbe>
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	e6 e3       	ldi	r30, 0x36	; 54
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	01 90       	ld	r0, Z+
 292:	0d 92       	st	X+, r0
 294:	8a 95       	dec	r24
 296:	e1 f7       	brne	.-8      	; 0x290 <Update_Terminal+0xcc>
	strcat(resultado,hum);
 298:	be 01       	movw	r22, r28
 29a:	63 5d       	subi	r22, 0xD3	; 211
 29c:	7e 4f       	sbci	r23, 0xFE	; 254
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 2a 03 	call	0x654	; 0x654 <strcat>
	strcat(resultado,"%\n\r");
 2a4:	f8 01       	movw	r30, r16
 2a6:	01 90       	ld	r0, Z+
 2a8:	00 20       	and	r0, r0
 2aa:	e9 f7       	brne	.-6      	; 0x2a6 <Update_Terminal+0xe2>
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	85 e2       	ldi	r24, 0x25	; 37
 2b0:	9a e0       	ldi	r25, 0x0A	; 10
 2b2:	91 83       	std	Z+1, r25	; 0x01
 2b4:	80 83       	st	Z, r24
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	93 83       	std	Z+3, r25	; 0x03
 2bc:	82 83       	std	Z+2, r24	; 0x02
	strcat(resultado,"Temperatura: ");
 2be:	d8 01       	movw	r26, r16
 2c0:	0d 90       	ld	r0, X+
 2c2:	00 20       	and	r0, r0
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <Update_Terminal+0xfc>
 2c6:	11 97       	sbiw	r26, 0x01	; 1
 2c8:	8e e0       	ldi	r24, 0x0E	; 14
 2ca:	e0 e4       	ldi	r30, 0x40	; 64
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <Update_Terminal+0x10a>
	strcat(resultado,temp);
 2d6:	be 01       	movw	r22, r28
 2d8:	6d 5c       	subi	r22, 0xCD	; 205
 2da:	7e 4f       	sbci	r23, 0xFE	; 254
 2dc:	c8 01       	movw	r24, r16
 2de:	0e 94 2a 03 	call	0x654	; 0x654 <strcat>
	strcat(resultado,"C\n\r\r");
 2e2:	d8 01       	movw	r26, r16
 2e4:	0d 90       	ld	r0, X+
 2e6:	00 20       	and	r0, r0
 2e8:	e9 f7       	brne	.-6      	; 0x2e4 <Update_Terminal+0x120>
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	ee e4       	ldi	r30, 0x4E	; 78
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <Update_Terminal+0x12e>
	        
	// Transmision por UART
	UART_transmit_string(resultado);
 2fa:	c8 01       	movw	r24, r16
 2fc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <UART_transmit_string>
	resultado[0]='\0';
}
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	c2 5c       	subi	r28, 0xC2	; 194
 30c:	de 4f       	sbci	r29, 0xFE	; 254
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <Transmition_Allowed>:

// Manjeador de interrupciones de buffer vacio -> cuando interrumpe tiene que mandar mas datos para transmitir (asignar a UDR0)
void Transmition_Allowed(){
	
	//UART_Reset_Index(); //static uint8_t i=0;
	char data = UART_Get_Char_From_Buffer();
 326:	0e 94 1c 03 	call	0x638	; 0x638 <UART_Get_Char_From_Buffer>
	if (data){
 32a:	88 23       	and	r24, r24
 32c:	19 f0       	breq	.+6      	; 0x334 <Transmition_Allowed+0xe>
		UDR0 = data;
 32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 332:	08 95       	ret
	}
	else{
		//Desactivo las interrupciones de transmision
		UART_Reset_Index();
 334:	0e 94 27 03 	call	0x64e	; 0x64e <UART_Reset_Index>
		SerialPort_TX_Interrupt_Disable();
 338:	0e 94 a4 02 	call	0x548	; 0x548 <SerialPort_TX_Interrupt_Disable>
 33c:	08 95       	ret

0000033e <Reception_Detected>:
	}
}

void Reception_Detected(){
	//Manejo de interrupciones de lectura terminada
	char data = SerialPort_Recive_Data(); //Leo caracter desde el registro de datos del UART
 33e:	0e 94 b6 02 	call	0x56c	; 0x56c <SerialPort_Recive_Data>
	
	if (data=='s' || data=='S'){
 342:	83 37       	cpi	r24, 0x73	; 115
 344:	11 f0       	breq	.+4      	; 0x34a <Reception_Detected+0xc>
 346:	83 35       	cpi	r24, 0x53	; 83
 348:	69 f4       	brne	.+26     	; 0x364 <Reception_Detected+0x26>
		if (UART_Transmition_Status()){
 34a:	0e 94 19 03 	call	0x632	; 0x632 <UART_Transmition_Status>
 34e:	88 23       	and	r24, r24
 350:	29 f0       	breq	.+10     	; 0x35c <Reception_Detected+0x1e>
			UART_TX_Disable(); //Si estan activadas, las desactivo
 352:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_TX_Disable>
			TIMER_Disable();
 356:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_Disable>
 35a:	08 95       	ret
		}
		else{
			UART_TX_Enable(); //Si estan desactivadas, las activo
 35c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_TX_Enable>
			TIMER_Enable();
 360:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_Enable>
 364:	08 95       	ret

00000366 <EventManager_Background>:
void Reception_Detected();
void Transmition_Allowed();
//-------------------------------*/

void EventManager_Background(){
	if (Flag_Reception_Detected){	//se detecto una tecla presionada
 366:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 36a:	88 23       	and	r24, r24
 36c:	21 f0       	breq	.+8      	; 0x376 <EventManager_Background+0x10>
		Reception_Detected();
 36e:	0e 94 9f 01 	call	0x33e	; 0x33e <Reception_Detected>
		Flag_Reception_Detected = 0;
 372:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
	}
	if(Flag_Send_Terminal){			//pasaron 2 segundos
 376:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Flag_Send_Terminal>
 37a:	88 23       	and	r24, r24
 37c:	21 f0       	breq	.+8      	; 0x386 <EventManager_Background+0x20>
		Update_Terminal();
 37e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Update_Terminal>
		Flag_Send_Terminal = 0;
 382:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <Flag_Send_Terminal>
	}
	if (Flag_Transmition_Allowed){	//Buffer disponible para empezar a transmitir
 386:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Flag_Transmition_Allowed>
 38a:	88 23       	and	r24, r24
 38c:	21 f0       	breq	.+8      	; 0x396 <EventManager_Background+0x30>
		Transmition_Allowed();
 38e:	0e 94 93 01 	call	0x326	; 0x326 <Transmition_Allowed>
		Flag_Transmition_Allowed = 0;
 392:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <Flag_Transmition_Allowed>
 396:	08 95       	ret

00000398 <__vector_18>:


//-------------------------FOREGROUND-------------------

//Manejo de interrupciones de lectura terminada
ISR(USART_RX_vect){
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	8f 93       	push	r24
	Flag_Reception_Detected = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
}
 3aa:	8f 91       	pop	r24
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_11>:

ISR (TIMER1_COMPA_vect){ //cada dos segundos
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	8f 93       	push	r24
	Flag_Send_Terminal = 1;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Flag_Send_Terminal>
}
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_19>:
/* Manjeador de interrupciones de buffer vacio -> cuando interrumpe tiene que mandar mas 
   datos para transmitir (asignar a UDR0)*/
ISR(USART_UDRE_vect){ //Interrupcion de que se puede transmitir en la UART
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	8f 93       	push	r24
	Flag_Transmition_Allowed = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Flag_Transmition_Allowed>
}
 3e6:	8f 91       	pop	r24
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <I2C_Init>:
#include "I2C.h"

void I2C_Init(void) {
  TWSR = 0x00;
 3f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = 152;
 3f6:	88 e9       	ldi	r24, 0x98	; 152
 3f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  TWCR = 0x04;
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 402:	08 95       	ret

00000404 <I2C_Start>:
}

void I2C_Start(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 404:	84 ea       	ldi	r24, 0xA4	; 164
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while ((TWCR & (1 << TWINT)) == 0);
 40a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 40e:	88 23       	and	r24, r24
 410:	e4 f7       	brge	.-8      	; 0x40a <I2C_Start+0x6>
}
 412:	08 95       	ret

00000414 <I2C_Stop>:

void I2C_Stop() {
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 414:	84 e9       	ldi	r24, 0x94	; 148
 416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 41a:	08 95       	ret

0000041c <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 41c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<< TWINT) |(1<<TWEN);
 420:	84 e8       	ldi	r24, 0x84	; 132
 422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 <<TWINT)) == 0);
 426:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 42a:	88 23       	and	r24, r24
 42c:	e4 f7       	brge	.-8      	; 0x426 <I2C_Write+0xa>
}
 42e:	08 95       	ret

00000430 <I2C_Read_ack>:

uint8_t I2C_Read_ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 430:	84 ec       	ldi	r24, 0xC4	; 196
 432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 436:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 43a:	88 23       	and	r24, r24
 43c:	e4 f7       	brge	.-8      	; 0x436 <I2C_Read_ack+0x6>
	return TWDR;
 43e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 442:	08 95       	ret

00000444 <I2C_Read_nack>:

uint8_t I2C_Read_nack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
 444:	84 e8       	ldi	r24, 0x84	; 132
 446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 44a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 44e:	88 23       	and	r24, r24
 450:	e4 f7       	brge	.-8      	; 0x44a <I2C_Read_nack+0x6>
	return TWDR;
 452:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 456:	08 95       	ret

00000458 <main>:

#include "main.h"

 
int main(void) {
    UART_Init(0x67); // baud rate calculado para 9600 bps
 458:	87 e6       	ldi	r24, 0x67	; 103
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_Init>
    DHT11_Start();
 460:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Start>
    I2C_Init();
 464:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <I2C_Init>
    //RTC_setup();
	TIMER_Init();
 468:	0e 94 c3 02 	call	0x586	; 0x586 <TIMER_Init>
	sei();
 46c:	78 94       	sei
    while (1) {
		EventManager_Background();
 46e:	0e 94 b3 01 	call	0x366	; 0x366 <EventManager_Background>
 472:	fd cf       	rjmp	.-6      	; 0x46e <main+0x16>

00000474 <bcdToDec>:
    I2C_Write(0); // Día de la semana (no se usa)
    I2C_Write(decToBcd(day));
    I2C_Write(decToBcd(month));
    I2C_Write(decToBcd(year));
    I2C_Stop();
}
 474:	98 2f       	mov	r25, r24
 476:	92 95       	swap	r25
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	99 0f       	add	r25, r25
 47c:	29 2f       	mov	r18, r25
 47e:	22 0f       	add	r18, r18
 480:	22 0f       	add	r18, r18
 482:	92 0f       	add	r25, r18
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	89 0f       	add	r24, r25
 488:	08 95       	ret

0000048a <RTC_getDateTime>:

void RTC_getDateTime(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 48a:	8f 92       	push	r8
 48c:	9f 92       	push	r9
 48e:	af 92       	push	r10
 490:	bf 92       	push	r11
 492:	cf 92       	push	r12
 494:	df 92       	push	r13
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ec 01       	movw	r28, r24
 4a4:	6b 01       	movw	r12, r22
 4a6:	5a 01       	movw	r10, r20
 4a8:	49 01       	movw	r8, r18
    I2C_Start();
 4aa:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Start>
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 0); // Dirección de escritura
 4ae:	80 ed       	ldi	r24, 0xD0	; 208
 4b0:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_Write>
    I2C_Write(0); // Comienza en la dirección 0x00
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_Write>
    I2C_Stop();
 4ba:	0e 94 0a 02 	call	0x414	; 0x414 <I2C_Stop>
    I2C_Start();
 4be:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Start>
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 1); // Dirección de lectura
 4c2:	81 ed       	ldi	r24, 0xD1	; 209
 4c4:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_Write>
    *second = bcdToDec(I2C_Read_ack());
 4c8:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
 4cc:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 4d0:	f7 01       	movw	r30, r14
 4d2:	80 83       	st	Z, r24
    *minute = bcdToDec(I2C_Read_ack());
 4d4:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
 4d8:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 4dc:	f8 01       	movw	r30, r16
 4de:	80 83       	st	Z, r24
    *hour = bcdToDec(I2C_Read_ack());
 4e0:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
 4e4:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 4e8:	f4 01       	movw	r30, r8
 4ea:	80 83       	st	Z, r24
    I2C_Read_ack(); // Día de la semana (no se usa)
 4ec:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
    *day = bcdToDec(I2C_Read_ack());
 4f0:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
 4f4:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 4f8:	f5 01       	movw	r30, r10
 4fa:	80 83       	st	Z, r24
    *month = bcdToDec(I2C_Read_ack());
 4fc:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Read_ack>
 500:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 504:	f6 01       	movw	r30, r12
 506:	80 83       	st	Z, r24
    *year = bcdToDec(I2C_Read_nack());
 508:	0e 94 22 02 	call	0x444	; 0x444 <I2C_Read_nack>
 50c:	0e 94 3a 02 	call	0x474	; 0x474 <bcdToDec>
 510:	88 83       	st	Y, r24
    I2C_Stop();
 512:	0e 94 0a 02 	call	0x414	; 0x414 <I2C_Stop>
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	df 90       	pop	r13
 524:	cf 90       	pop	r12
 526:	bf 90       	pop	r11
 528:	af 90       	pop	r10
 52a:	9f 90       	pop	r9
 52c:	8f 90       	pop	r8
 52e:	08 95       	ret

00000530 <SerialPort_TX_Enable>:

// Espera hasta que el buffer de RX este completo.
void SerialPort_Wait_Until_New_Data(void){
	// Pooling - Bloqueante, puede durar indefinidamente!
	while(!(UCSR0A & (1<<RXC0)));
}
 530:	e1 ec       	ldi	r30, 0xC1	; 193
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 60       	ori	r24, 0x08	; 8
 538:	80 83       	st	Z, r24
 53a:	08 95       	ret

0000053c <SerialPort_TX_Interrupt_Enable>:
 53c:	e1 ec       	ldi	r30, 0xC1	; 193
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	80 62       	ori	r24, 0x20	; 32
 544:	80 83       	st	Z, r24
 546:	08 95       	ret

00000548 <SerialPort_TX_Interrupt_Disable>:
 548:	e1 ec       	ldi	r30, 0xC1	; 193
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	8f 7d       	andi	r24, 0xDF	; 223
 550:	80 83       	st	Z, r24
 552:	08 95       	ret

00000554 <SerialPort_RX_Enable>:
 554:	e1 ec       	ldi	r30, 0xC1	; 193
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	80 61       	ori	r24, 0x10	; 16
 55c:	80 83       	st	Z, r24
 55e:	08 95       	ret

00000560 <SerialPort_RX_Interrupt_Enable>:
 560:	e1 ec       	ldi	r30, 0xC1	; 193
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret

0000056c <SerialPort_Recive_Data>:


char SerialPort_Recive_Data(void){
	return UDR0;
 56c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 570:	08 95       	ret

00000572 <TIMER_Enable>:
	OCR1A = GET_OCR1A;                    // Establece el valor de comparación
	TIMER_Enable();
}

void TIMER_Enable(){
	TIMSK1 |= (1 << OCIE1A);            // Habilita la interrupción de comparación A	
 572:	ef e6       	ldi	r30, 0x6F	; 111
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	80 83       	st	Z, r24
	TCNT1 = 0;							//Reiniciar contador
 57c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 580:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 584:	08 95       	ret

00000586 <TIMER_Init>:
//Al final si se puede hacer de 2 segundos jaja -> T = 2 y PREESCALER = 1024 --> OCR1A = 31249 que si entra en 16 bits.

#define GET_OCR1A ((F_CPU*T/PREESCALER)-1)  //Formula para el OCR1A

void TIMER_Init() {		  //Configuracion del Timer de 2s
	TCCR1B |= (1 << WGM12);               // Configura el modo CTC (Clear Timer on Compare Match)
 586:	e1 e8       	ldi	r30, 0x81	; 129
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	88 60       	ori	r24, 0x08	; 8
 58e:	80 83       	st	Z, r24
	TCCR1B |= ((1 << CS12) | (1 << CS10));// Configura el preescalador a 1024
 590:	80 81       	ld	r24, Z
 592:	85 60       	ori	r24, 0x05	; 5
 594:	80 83       	st	Z, r24
	OCR1A = GET_OCR1A;                    // Establece el valor de comparación
 596:	81 e1       	ldi	r24, 0x11	; 17
 598:	9a e7       	ldi	r25, 0x7A	; 122
 59a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 59e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMER_Enable();
 5a2:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_Enable>
 5a6:	08 95       	ret

000005a8 <TIMER_Disable>:
	TIMSK1 |= (1 << OCIE1A);            // Habilita la interrupción de comparación A	
	TCNT1 = 0;							//Reiniciar contador
}

void TIMER_Disable(){
	TIMSK1 &= ~(1 << OCIE1A);              // Deshabilita la interrupción de comparación A
 5a8:	ef e6       	ldi	r30, 0x6F	; 111
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	8d 7f       	andi	r24, 0xFD	; 253
 5b0:	80 83       	st	Z, r24
 5b2:	08 95       	ret

000005b4 <UART_Init>:
static volatile uint8_t TX_enabled = 0; //desactivado

void UART_Init(uint16_t ubrr_value) {
	
	// Configuración de baud rate
	UBRR0H = (uint8_t)(ubrr_value >> 8); // Parte alta del UBRR
 5b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	UBRR0L = (uint8_t)ubrr_value;   
 5b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	     
	// Configuración: 8 bits de datos, sin paridad, 1 bit de parada (stop bit)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	
	SerialPort_RX_Enable();		// Activo el Receptor del Puerto Serie
 5c2:	0e 94 aa 02 	call	0x554	; 0x554 <SerialPort_RX_Enable>
	SerialPort_TX_Enable();		// Activo el Transmisor del Puerto Serie
 5c6:	0e 94 98 02 	call	0x530	; 0x530 <SerialPort_TX_Enable>
	TX_enabled=1;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <TX_enabled>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion
 5d0:	0e 94 b0 02 	call	0x560	; 0x560 <SerialPort_RX_Interrupt_Enable>
	// Habilitar transmisión y recepción
	//UCSR0B = (1 << TXEN0) | (1 << RXEN0);
	BUFFER_TX[0] = '/0';
 5d4:	80 e3       	ldi	r24, 0x30	; 48
 5d6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <BUFFER_TX>
 5da:	08 95       	ret

000005dc <UART_TX_Disable>:
}

void UART_TX_Disable(){
	UCSR0B &=~(1<<TXEN0);
 5dc:	e1 ec       	ldi	r30, 0xC1	; 193
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 83       	st	Z, r24
	TX_enabled = 0;
 5e6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <TX_enabled>
 5ea:	08 95       	ret

000005ec <UART_TX_Enable>:
}

void UART_TX_Enable(){
	SerialPort_TX_Enable();
 5ec:	0e 94 98 02 	call	0x530	; 0x530 <SerialPort_TX_Enable>
	TX_enabled = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <TX_enabled>
 5f6:	08 95       	ret

000005f8 <UART_transmit_string>:
}

void UART_transmit_string(char* str) {
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ec 01       	movw	r28, r24
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
 5fe:	88 81       	ld	r24, Y
 600:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <BUFFER_TX>
	SerialPort_TX_Interrupt_Enable();
 604:	0e 94 9e 02 	call	0x53c	; 0x53c <SerialPort_TX_Interrupt_Enable>
	TX_enabled = 1;
}

void UART_transmit_string(char* str) {
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
 608:	e1 e0       	ldi	r30, 0x01	; 1
	SerialPort_TX_Interrupt_Enable();
	while(str[i] && i < BUFFER_SIZE){
 60a:	06 c0       	rjmp	.+12     	; 0x618 <UART_transmit_string+0x20>
		BUFFER_TX[i] = str[i];
 60c:	ae 2f       	mov	r26, r30
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	a7 5a       	subi	r26, 0xA7	; 167
 612:	be 4f       	sbci	r27, 0xFE	; 254
 614:	8c 93       	st	X, r24
		i++;
 616:	ef 5f       	subi	r30, 0xFF	; 255

void UART_transmit_string(char* str) {
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
	SerialPort_TX_Interrupt_Enable();
	while(str[i] && i < BUFFER_SIZE){
 618:	de 01       	movw	r26, r28
 61a:	ae 0f       	add	r26, r30
 61c:	b1 1d       	adc	r27, r1
 61e:	8c 91       	ld	r24, X
 620:	81 11       	cpse	r24, r1
 622:	f4 cf       	rjmp	.-24     	; 0x60c <UART_transmit_string+0x14>
		BUFFER_TX[i] = str[i];
		i++;
	}
	 BUFFER_TX[i] = '\0';
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	e7 5a       	subi	r30, 0xA7	; 167
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	10 82       	st	Z, r1
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <UART_Transmition_Status>:

uint8_t UART_Transmition_Status(){
	return TX_enabled;
 632:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <TX_enabled>
}
 636:	08 95       	ret

00000638 <UART_Get_Char_From_Buffer>:

char UART_Get_Char_From_Buffer(){
	return BUFFER_TX[index++];
 638:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <index>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	8e 0f       	add	r24, r30
 640:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <index>
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	e7 5a       	subi	r30, 0xA7	; 167
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
}
 64c:	08 95       	ret

0000064e <UART_Reset_Index>:

void UART_Reset_Index(){
	index = 0;
 64e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <index>
 652:	08 95       	ret

00000654 <strcat>:
 654:	fb 01       	movw	r30, r22
 656:	dc 01       	movw	r26, r24
 658:	0d 90       	ld	r0, X+
 65a:	00 20       	and	r0, r0
 65c:	e9 f7       	brne	.-6      	; 0x658 <strcat+0x4>
 65e:	11 97       	sbiw	r26, 0x01	; 1
 660:	01 90       	ld	r0, Z+
 662:	0d 92       	st	X+, r0
 664:	00 20       	and	r0, r0
 666:	e1 f7       	brne	.-8      	; 0x660 <strcat+0xc>
 668:	08 95       	ret

0000066a <sprintf>:
 66a:	ae e0       	ldi	r26, 0x0E	; 14
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	eb e3       	ldi	r30, 0x3B	; 59
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__prologue_saves__+0x1c>
 676:	0d 89       	ldd	r16, Y+21	; 0x15
 678:	1e 89       	ldd	r17, Y+22	; 0x16
 67a:	86 e0       	ldi	r24, 0x06	; 6
 67c:	8c 83       	std	Y+4, r24	; 0x04
 67e:	1a 83       	std	Y+2, r17	; 0x02
 680:	09 83       	std	Y+1, r16	; 0x01
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	9f e7       	ldi	r25, 0x7F	; 127
 686:	9e 83       	std	Y+6, r25	; 0x06
 688:	8d 83       	std	Y+5, r24	; 0x05
 68a:	ae 01       	movw	r20, r28
 68c:	47 5e       	subi	r20, 0xE7	; 231
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	6f 89       	ldd	r22, Y+23	; 0x17
 692:	78 8d       	ldd	r23, Y+24	; 0x18
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	0e 94 57 03 	call	0x6ae	; 0x6ae <vfprintf>
 69c:	ef 81       	ldd	r30, Y+7	; 0x07
 69e:	f8 85       	ldd	r31, Y+8	; 0x08
 6a0:	e0 0f       	add	r30, r16
 6a2:	f1 1f       	adc	r31, r17
 6a4:	10 82       	st	Z, r1
 6a6:	2e 96       	adiw	r28, 0x0e	; 14
 6a8:	e4 e0       	ldi	r30, 0x04	; 4
 6aa:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__epilogue_restores__+0x1c>

000006ae <vfprintf>:
 6ae:	ab e0       	ldi	r26, 0x0B	; 11
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	ed e5       	ldi	r30, 0x5D	; 93
 6b4:	f3 e0       	ldi	r31, 0x03	; 3
 6b6:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__prologue_saves__>
 6ba:	6c 01       	movw	r12, r24
 6bc:	7b 01       	movw	r14, r22
 6be:	8a 01       	movw	r16, r20
 6c0:	fc 01       	movw	r30, r24
 6c2:	17 82       	std	Z+7, r1	; 0x07
 6c4:	16 82       	std	Z+6, r1	; 0x06
 6c6:	83 81       	ldd	r24, Z+3	; 0x03
 6c8:	81 ff       	sbrs	r24, 1
 6ca:	cc c1       	rjmp	.+920    	; 0xa64 <__stack+0x165>
 6cc:	ce 01       	movw	r24, r28
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	3c 01       	movw	r6, r24
 6d2:	f6 01       	movw	r30, r12
 6d4:	93 81       	ldd	r25, Z+3	; 0x03
 6d6:	f7 01       	movw	r30, r14
 6d8:	93 fd       	sbrc	r25, 3
 6da:	85 91       	lpm	r24, Z+
 6dc:	93 ff       	sbrs	r25, 3
 6de:	81 91       	ld	r24, Z+
 6e0:	7f 01       	movw	r14, r30
 6e2:	88 23       	and	r24, r24
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <vfprintf+0x3a>
 6e6:	ba c1       	rjmp	.+884    	; 0xa5c <__stack+0x15d>
 6e8:	85 32       	cpi	r24, 0x25	; 37
 6ea:	39 f4       	brne	.+14     	; 0x6fa <vfprintf+0x4c>
 6ec:	93 fd       	sbrc	r25, 3
 6ee:	85 91       	lpm	r24, Z+
 6f0:	93 ff       	sbrs	r25, 3
 6f2:	81 91       	ld	r24, Z+
 6f4:	7f 01       	movw	r14, r30
 6f6:	85 32       	cpi	r24, 0x25	; 37
 6f8:	29 f4       	brne	.+10     	; 0x704 <vfprintf+0x56>
 6fa:	b6 01       	movw	r22, r12
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 702:	e7 cf       	rjmp	.-50     	; 0x6d2 <vfprintf+0x24>
 704:	91 2c       	mov	r9, r1
 706:	21 2c       	mov	r2, r1
 708:	31 2c       	mov	r3, r1
 70a:	ff e1       	ldi	r31, 0x1F	; 31
 70c:	f3 15       	cp	r31, r3
 70e:	d8 f0       	brcs	.+54     	; 0x746 <vfprintf+0x98>
 710:	8b 32       	cpi	r24, 0x2B	; 43
 712:	79 f0       	breq	.+30     	; 0x732 <vfprintf+0x84>
 714:	38 f4       	brcc	.+14     	; 0x724 <vfprintf+0x76>
 716:	80 32       	cpi	r24, 0x20	; 32
 718:	79 f0       	breq	.+30     	; 0x738 <vfprintf+0x8a>
 71a:	83 32       	cpi	r24, 0x23	; 35
 71c:	a1 f4       	brne	.+40     	; 0x746 <vfprintf+0x98>
 71e:	23 2d       	mov	r18, r3
 720:	20 61       	ori	r18, 0x10	; 16
 722:	1d c0       	rjmp	.+58     	; 0x75e <vfprintf+0xb0>
 724:	8d 32       	cpi	r24, 0x2D	; 45
 726:	61 f0       	breq	.+24     	; 0x740 <vfprintf+0x92>
 728:	80 33       	cpi	r24, 0x30	; 48
 72a:	69 f4       	brne	.+26     	; 0x746 <vfprintf+0x98>
 72c:	23 2d       	mov	r18, r3
 72e:	21 60       	ori	r18, 0x01	; 1
 730:	16 c0       	rjmp	.+44     	; 0x75e <vfprintf+0xb0>
 732:	83 2d       	mov	r24, r3
 734:	82 60       	ori	r24, 0x02	; 2
 736:	38 2e       	mov	r3, r24
 738:	e3 2d       	mov	r30, r3
 73a:	e4 60       	ori	r30, 0x04	; 4
 73c:	3e 2e       	mov	r3, r30
 73e:	2a c0       	rjmp	.+84     	; 0x794 <vfprintf+0xe6>
 740:	f3 2d       	mov	r31, r3
 742:	f8 60       	ori	r31, 0x08	; 8
 744:	1d c0       	rjmp	.+58     	; 0x780 <vfprintf+0xd2>
 746:	37 fc       	sbrc	r3, 7
 748:	2d c0       	rjmp	.+90     	; 0x7a4 <vfprintf+0xf6>
 74a:	20 ed       	ldi	r18, 0xD0	; 208
 74c:	28 0f       	add	r18, r24
 74e:	2a 30       	cpi	r18, 0x0A	; 10
 750:	40 f0       	brcs	.+16     	; 0x762 <vfprintf+0xb4>
 752:	8e 32       	cpi	r24, 0x2E	; 46
 754:	b9 f4       	brne	.+46     	; 0x784 <vfprintf+0xd6>
 756:	36 fc       	sbrc	r3, 6
 758:	81 c1       	rjmp	.+770    	; 0xa5c <__stack+0x15d>
 75a:	23 2d       	mov	r18, r3
 75c:	20 64       	ori	r18, 0x40	; 64
 75e:	32 2e       	mov	r3, r18
 760:	19 c0       	rjmp	.+50     	; 0x794 <vfprintf+0xe6>
 762:	36 fe       	sbrs	r3, 6
 764:	06 c0       	rjmp	.+12     	; 0x772 <vfprintf+0xc4>
 766:	8a e0       	ldi	r24, 0x0A	; 10
 768:	98 9e       	mul	r9, r24
 76a:	20 0d       	add	r18, r0
 76c:	11 24       	eor	r1, r1
 76e:	92 2e       	mov	r9, r18
 770:	11 c0       	rjmp	.+34     	; 0x794 <vfprintf+0xe6>
 772:	ea e0       	ldi	r30, 0x0A	; 10
 774:	2e 9e       	mul	r2, r30
 776:	20 0d       	add	r18, r0
 778:	11 24       	eor	r1, r1
 77a:	22 2e       	mov	r2, r18
 77c:	f3 2d       	mov	r31, r3
 77e:	f0 62       	ori	r31, 0x20	; 32
 780:	3f 2e       	mov	r3, r31
 782:	08 c0       	rjmp	.+16     	; 0x794 <vfprintf+0xe6>
 784:	8c 36       	cpi	r24, 0x6C	; 108
 786:	21 f4       	brne	.+8      	; 0x790 <vfprintf+0xe2>
 788:	83 2d       	mov	r24, r3
 78a:	80 68       	ori	r24, 0x80	; 128
 78c:	38 2e       	mov	r3, r24
 78e:	02 c0       	rjmp	.+4      	; 0x794 <vfprintf+0xe6>
 790:	88 36       	cpi	r24, 0x68	; 104
 792:	41 f4       	brne	.+16     	; 0x7a4 <vfprintf+0xf6>
 794:	f7 01       	movw	r30, r14
 796:	93 fd       	sbrc	r25, 3
 798:	85 91       	lpm	r24, Z+
 79a:	93 ff       	sbrs	r25, 3
 79c:	81 91       	ld	r24, Z+
 79e:	7f 01       	movw	r14, r30
 7a0:	81 11       	cpse	r24, r1
 7a2:	b3 cf       	rjmp	.-154    	; 0x70a <vfprintf+0x5c>
 7a4:	98 2f       	mov	r25, r24
 7a6:	9f 7d       	andi	r25, 0xDF	; 223
 7a8:	95 54       	subi	r25, 0x45	; 69
 7aa:	93 30       	cpi	r25, 0x03	; 3
 7ac:	28 f4       	brcc	.+10     	; 0x7b8 <vfprintf+0x10a>
 7ae:	0c 5f       	subi	r16, 0xFC	; 252
 7b0:	1f 4f       	sbci	r17, 0xFF	; 255
 7b2:	9f e3       	ldi	r25, 0x3F	; 63
 7b4:	99 83       	std	Y+1, r25	; 0x01
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x124>
 7b8:	83 36       	cpi	r24, 0x63	; 99
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <vfprintf+0x11a>
 7bc:	83 37       	cpi	r24, 0x73	; 115
 7be:	71 f0       	breq	.+28     	; 0x7dc <vfprintf+0x12e>
 7c0:	83 35       	cpi	r24, 0x53	; 83
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <vfprintf+0x118>
 7c4:	59 c0       	rjmp	.+178    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 7c6:	21 c0       	rjmp	.+66     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7c8:	f8 01       	movw	r30, r16
 7ca:	80 81       	ld	r24, Z
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	0e 5f       	subi	r16, 0xFE	; 254
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	88 24       	eor	r8, r8
 7d4:	83 94       	inc	r8
 7d6:	91 2c       	mov	r9, r1
 7d8:	53 01       	movw	r10, r6
 7da:	13 c0       	rjmp	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7dc:	28 01       	movw	r4, r16
 7de:	f2 e0       	ldi	r31, 0x02	; 2
 7e0:	4f 0e       	add	r4, r31
 7e2:	51 1c       	adc	r5, r1
 7e4:	f8 01       	movw	r30, r16
 7e6:	a0 80       	ld	r10, Z
 7e8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ea:	36 fe       	sbrs	r3, 6
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x146>
 7ee:	69 2d       	mov	r22, r9
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x14a>
 7f4:	6f ef       	ldi	r22, 0xFF	; 255
 7f6:	7f ef       	ldi	r23, 0xFF	; 255
 7f8:	c5 01       	movw	r24, r10
 7fa:	0e 94 43 05 	call	0xa86	; 0xa86 <strnlen>
 7fe:	4c 01       	movw	r8, r24
 800:	82 01       	movw	r16, r4
 802:	f3 2d       	mov	r31, r3
 804:	ff 77       	andi	r31, 0x7F	; 127
 806:	3f 2e       	mov	r3, r31
 808:	16 c0       	rjmp	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 80a:	28 01       	movw	r4, r16
 80c:	22 e0       	ldi	r18, 0x02	; 2
 80e:	42 0e       	add	r4, r18
 810:	51 1c       	adc	r5, r1
 812:	f8 01       	movw	r30, r16
 814:	a0 80       	ld	r10, Z
 816:	b1 80       	ldd	r11, Z+1	; 0x01
 818:	36 fe       	sbrs	r3, 6
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	69 2d       	mov	r22, r9
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	6f ef       	ldi	r22, 0xFF	; 255
 824:	7f ef       	ldi	r23, 0xFF	; 255
 826:	c5 01       	movw	r24, r10
 828:	0e 94 38 05 	call	0xa70	; 0xa70 <strnlen_P>
 82c:	4c 01       	movw	r8, r24
 82e:	f3 2d       	mov	r31, r3
 830:	f0 68       	ori	r31, 0x80	; 128
 832:	3f 2e       	mov	r3, r31
 834:	82 01       	movw	r16, r4
 836:	33 fc       	sbrc	r3, 3
 838:	1b c0       	rjmp	.+54     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 83a:	82 2d       	mov	r24, r2
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	88 16       	cp	r8, r24
 840:	99 06       	cpc	r9, r25
 842:	b0 f4       	brcc	.+44     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 844:	b6 01       	movw	r22, r12
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 84e:	2a 94       	dec	r2
 850:	f4 cf       	rjmp	.-24     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 852:	f5 01       	movw	r30, r10
 854:	37 fc       	sbrc	r3, 7
 856:	85 91       	lpm	r24, Z+
 858:	37 fe       	sbrs	r3, 7
 85a:	81 91       	ld	r24, Z+
 85c:	5f 01       	movw	r10, r30
 85e:	b6 01       	movw	r22, r12
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 866:	21 10       	cpse	r2, r1
 868:	2a 94       	dec	r2
 86a:	21 e0       	ldi	r18, 0x01	; 1
 86c:	82 1a       	sub	r8, r18
 86e:	91 08       	sbc	r9, r1
 870:	81 14       	cp	r8, r1
 872:	91 04       	cpc	r9, r1
 874:	71 f7       	brne	.-36     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 876:	e8 c0       	rjmp	.+464    	; 0xa48 <__stack+0x149>
 878:	84 36       	cpi	r24, 0x64	; 100
 87a:	11 f0       	breq	.+4      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87c:	89 36       	cpi	r24, 0x69	; 105
 87e:	41 f5       	brne	.+80     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 880:	f8 01       	movw	r30, r16
 882:	37 fe       	sbrs	r3, 7
 884:	07 c0       	rjmp	.+14     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	82 81       	ldd	r24, Z+2	; 0x02
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	0c 5f       	subi	r16, 0xFC	; 252
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 894:	60 81       	ld	r22, Z
 896:	71 81       	ldd	r23, Z+1	; 0x01
 898:	07 2e       	mov	r0, r23
 89a:	00 0c       	add	r0, r0
 89c:	88 0b       	sbc	r24, r24
 89e:	99 0b       	sbc	r25, r25
 8a0:	0e 5f       	subi	r16, 0xFE	; 254
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	f3 2d       	mov	r31, r3
 8a6:	ff 76       	andi	r31, 0x6F	; 111
 8a8:	3f 2e       	mov	r3, r31
 8aa:	97 ff       	sbrs	r25, 7
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ae:	90 95       	com	r25
 8b0:	80 95       	com	r24
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	f0 68       	ori	r31, 0x80	; 128
 8be:	3f 2e       	mov	r3, r31
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	a3 01       	movw	r20, r6
 8c6:	0e 94 8a 05 	call	0xb14	; 0xb14 <__ultoa_invert>
 8ca:	88 2e       	mov	r8, r24
 8cc:	86 18       	sub	r8, r6
 8ce:	45 c0       	rjmp	.+138    	; 0x95a <__stack+0x5b>
 8d0:	85 37       	cpi	r24, 0x75	; 117
 8d2:	31 f4       	brne	.+12     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8d4:	23 2d       	mov	r18, r3
 8d6:	2f 7e       	andi	r18, 0xEF	; 239
 8d8:	b2 2e       	mov	r11, r18
 8da:	2a e0       	ldi	r18, 0x0A	; 10
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	25 c0       	rjmp	.+74     	; 0x92a <__stack+0x2b>
 8e0:	93 2d       	mov	r25, r3
 8e2:	99 7f       	andi	r25, 0xF9	; 249
 8e4:	b9 2e       	mov	r11, r25
 8e6:	8f 36       	cpi	r24, 0x6F	; 111
 8e8:	c1 f0       	breq	.+48     	; 0x91a <__stack+0x1b>
 8ea:	18 f4       	brcc	.+6      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8ec:	88 35       	cpi	r24, 0x58	; 88
 8ee:	79 f0       	breq	.+30     	; 0x90e <__stack+0xf>
 8f0:	b5 c0       	rjmp	.+362    	; 0xa5c <__stack+0x15d>
 8f2:	80 37       	cpi	r24, 0x70	; 112
 8f4:	19 f0       	breq	.+6      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f6:	88 37       	cpi	r24, 0x78	; 120
 8f8:	21 f0       	breq	.+8      	; 0x902 <__stack+0x3>
 8fa:	b0 c0       	rjmp	.+352    	; 0xa5c <__stack+0x15d>
 8fc:	e9 2f       	mov	r30, r25
 8fe:	e0 61       	ori	r30, 0x10	; 16
 900:	be 2e       	mov	r11, r30
 902:	b4 fe       	sbrs	r11, 4
 904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0x21>
 906:	fb 2d       	mov	r31, r11
 908:	f4 60       	ori	r31, 0x04	; 4
 90a:	bf 2e       	mov	r11, r31
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0x21>
 90e:	34 fe       	sbrs	r3, 4
 910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0x27>
 912:	29 2f       	mov	r18, r25
 914:	26 60       	ori	r18, 0x06	; 6
 916:	b2 2e       	mov	r11, r18
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	28 e0       	ldi	r18, 0x08	; 8
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
 920:	20 e1       	ldi	r18, 0x10	; 16
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	20 e1       	ldi	r18, 0x10	; 16
 928:	32 e0       	ldi	r19, 0x02	; 2
 92a:	f8 01       	movw	r30, r16
 92c:	b7 fe       	sbrs	r11, 7
 92e:	07 c0       	rjmp	.+14     	; 0x93e <__stack+0x3f>
 930:	60 81       	ld	r22, Z
 932:	71 81       	ldd	r23, Z+1	; 0x01
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0x4b>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 5f       	subi	r16, 0xFE	; 254
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	a3 01       	movw	r20, r6
 94c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__ultoa_invert>
 950:	88 2e       	mov	r8, r24
 952:	86 18       	sub	r8, r6
 954:	fb 2d       	mov	r31, r11
 956:	ff 77       	andi	r31, 0x7F	; 127
 958:	3f 2e       	mov	r3, r31
 95a:	36 fe       	sbrs	r3, 6
 95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x79>
 95e:	23 2d       	mov	r18, r3
 960:	2e 7f       	andi	r18, 0xFE	; 254
 962:	a2 2e       	mov	r10, r18
 964:	89 14       	cp	r8, r9
 966:	58 f4       	brcc	.+22     	; 0x97e <__stack+0x7f>
 968:	34 fe       	sbrs	r3, 4
 96a:	0b c0       	rjmp	.+22     	; 0x982 <__stack+0x83>
 96c:	32 fc       	sbrc	r3, 2
 96e:	09 c0       	rjmp	.+18     	; 0x982 <__stack+0x83>
 970:	83 2d       	mov	r24, r3
 972:	8e 7e       	andi	r24, 0xEE	; 238
 974:	a8 2e       	mov	r10, r24
 976:	05 c0       	rjmp	.+10     	; 0x982 <__stack+0x83>
 978:	b8 2c       	mov	r11, r8
 97a:	a3 2c       	mov	r10, r3
 97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x85>
 97e:	b8 2c       	mov	r11, r8
 980:	01 c0       	rjmp	.+2      	; 0x984 <__stack+0x85>
 982:	b9 2c       	mov	r11, r9
 984:	a4 fe       	sbrs	r10, 4
 986:	0f c0       	rjmp	.+30     	; 0x9a6 <__stack+0xa7>
 988:	fe 01       	movw	r30, r28
 98a:	e8 0d       	add	r30, r8
 98c:	f1 1d       	adc	r31, r1
 98e:	80 81       	ld	r24, Z
 990:	80 33       	cpi	r24, 0x30	; 48
 992:	21 f4       	brne	.+8      	; 0x99c <__stack+0x9d>
 994:	9a 2d       	mov	r25, r10
 996:	99 7e       	andi	r25, 0xE9	; 233
 998:	a9 2e       	mov	r10, r25
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <__stack+0xaf>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <__stack+0xad>
 9a0:	b3 94       	inc	r11
 9a2:	b3 94       	inc	r11
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__stack+0xaf>
 9a6:	8a 2d       	mov	r24, r10
 9a8:	86 78       	andi	r24, 0x86	; 134
 9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0xaf>
 9ac:	b3 94       	inc	r11
 9ae:	a3 fc       	sbrc	r10, 3
 9b0:	11 c0       	rjmp	.+34     	; 0x9d4 <__stack+0xd5>
 9b2:	a0 fe       	sbrs	r10, 0
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <__stack+0xc3>
 9b6:	b2 14       	cp	r11, r2
 9b8:	88 f4       	brcc	.+34     	; 0x9dc <__stack+0xdd>
 9ba:	28 0c       	add	r2, r8
 9bc:	92 2c       	mov	r9, r2
 9be:	9b 18       	sub	r9, r11
 9c0:	0e c0       	rjmp	.+28     	; 0x9de <__stack+0xdf>
 9c2:	b2 14       	cp	r11, r2
 9c4:	60 f4       	brcc	.+24     	; 0x9de <__stack+0xdf>
 9c6:	b6 01       	movw	r22, r12
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 9d0:	b3 94       	inc	r11
 9d2:	f7 cf       	rjmp	.-18     	; 0x9c2 <__stack+0xc3>
 9d4:	b2 14       	cp	r11, r2
 9d6:	18 f4       	brcc	.+6      	; 0x9de <__stack+0xdf>
 9d8:	2b 18       	sub	r2, r11
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	98 2c       	mov	r9, r8
 9de:	21 2c       	mov	r2, r1
 9e0:	a4 fe       	sbrs	r10, 4
 9e2:	10 c0       	rjmp	.+32     	; 0xa04 <__stack+0x105>
 9e4:	b6 01       	movw	r22, r12
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 9ee:	a2 fe       	sbrs	r10, 2
 9f0:	17 c0       	rjmp	.+46     	; 0xa20 <__stack+0x121>
 9f2:	a1 fc       	sbrc	r10, 1
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__stack+0xfd>
 9f6:	88 e7       	ldi	r24, 0x78	; 120
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x101>
 9fc:	88 e5       	ldi	r24, 0x58	; 88
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	b6 01       	movw	r22, r12
 a02:	0c c0       	rjmp	.+24     	; 0xa1c <__stack+0x11d>
 a04:	8a 2d       	mov	r24, r10
 a06:	86 78       	andi	r24, 0x86	; 134
 a08:	59 f0       	breq	.+22     	; 0xa20 <__stack+0x121>
 a0a:	a1 fe       	sbrs	r10, 1
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x113>
 a0e:	8b e2       	ldi	r24, 0x2B	; 43
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <__stack+0x115>
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	a7 fc       	sbrc	r10, 7
 a16:	8d e2       	ldi	r24, 0x2D	; 45
 a18:	b6 01       	movw	r22, r12
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a20:	89 14       	cp	r8, r9
 a22:	38 f4       	brcc	.+14     	; 0xa32 <__stack+0x133>
 a24:	b6 01       	movw	r22, r12
 a26:	80 e3       	ldi	r24, 0x30	; 48
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a2e:	9a 94       	dec	r9
 a30:	f7 cf       	rjmp	.-18     	; 0xa20 <__stack+0x121>
 a32:	8a 94       	dec	r8
 a34:	f3 01       	movw	r30, r6
 a36:	e8 0d       	add	r30, r8
 a38:	f1 1d       	adc	r31, r1
 a3a:	80 81       	ld	r24, Z
 a3c:	b6 01       	movw	r22, r12
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a44:	81 10       	cpse	r8, r1
 a46:	f5 cf       	rjmp	.-22     	; 0xa32 <__stack+0x133>
 a48:	22 20       	and	r2, r2
 a4a:	09 f4       	brne	.+2      	; 0xa4e <__stack+0x14f>
 a4c:	42 ce       	rjmp	.-892    	; 0x6d2 <vfprintf+0x24>
 a4e:	b6 01       	movw	r22, r12
 a50:	80 e2       	ldi	r24, 0x20	; 32
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a58:	2a 94       	dec	r2
 a5a:	f6 cf       	rjmp	.-20     	; 0xa48 <__stack+0x149>
 a5c:	f6 01       	movw	r30, r12
 a5e:	86 81       	ldd	r24, Z+6	; 0x06
 a60:	97 81       	ldd	r25, Z+7	; 0x07
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	2b 96       	adiw	r28, 0x0b	; 11
 a6a:	e2 e1       	ldi	r30, 0x12	; 18
 a6c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__epilogue_restores__>

00000a70 <strnlen_P>:
 a70:	fc 01       	movw	r30, r24
 a72:	05 90       	lpm	r0, Z+
 a74:	61 50       	subi	r22, 0x01	; 1
 a76:	70 40       	sbci	r23, 0x00	; 0
 a78:	01 10       	cpse	r0, r1
 a7a:	d8 f7       	brcc	.-10     	; 0xa72 <strnlen_P+0x2>
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	8e 0f       	add	r24, r30
 a82:	9f 1f       	adc	r25, r31
 a84:	08 95       	ret

00000a86 <strnlen>:
 a86:	fc 01       	movw	r30, r24
 a88:	61 50       	subi	r22, 0x01	; 1
 a8a:	70 40       	sbci	r23, 0x00	; 0
 a8c:	01 90       	ld	r0, Z+
 a8e:	01 10       	cpse	r0, r1
 a90:	d8 f7       	brcc	.-10     	; 0xa88 <strnlen+0x2>
 a92:	80 95       	com	r24
 a94:	90 95       	com	r25
 a96:	8e 0f       	add	r24, r30
 a98:	9f 1f       	adc	r25, r31
 a9a:	08 95       	ret

00000a9c <fputc>:
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	fb 01       	movw	r30, r22
 aa6:	23 81       	ldd	r18, Z+3	; 0x03
 aa8:	21 fd       	sbrc	r18, 1
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <fputc+0x16>
 aac:	8f ef       	ldi	r24, 0xFF	; 255
 aae:	9f ef       	ldi	r25, 0xFF	; 255
 ab0:	2c c0       	rjmp	.+88     	; 0xb0a <fputc+0x6e>
 ab2:	22 ff       	sbrs	r18, 2
 ab4:	16 c0       	rjmp	.+44     	; 0xae2 <fputc+0x46>
 ab6:	46 81       	ldd	r20, Z+6	; 0x06
 ab8:	57 81       	ldd	r21, Z+7	; 0x07
 aba:	24 81       	ldd	r18, Z+4	; 0x04
 abc:	35 81       	ldd	r19, Z+5	; 0x05
 abe:	42 17       	cp	r20, r18
 ac0:	53 07       	cpc	r21, r19
 ac2:	44 f4       	brge	.+16     	; 0xad4 <fputc+0x38>
 ac4:	a0 81       	ld	r26, Z
 ac6:	b1 81       	ldd	r27, Z+1	; 0x01
 ac8:	9d 01       	movw	r18, r26
 aca:	2f 5f       	subi	r18, 0xFF	; 255
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	31 83       	std	Z+1, r19	; 0x01
 ad0:	20 83       	st	Z, r18
 ad2:	8c 93       	st	X, r24
 ad4:	26 81       	ldd	r18, Z+6	; 0x06
 ad6:	37 81       	ldd	r19, Z+7	; 0x07
 ad8:	2f 5f       	subi	r18, 0xFF	; 255
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	37 83       	std	Z+7, r19	; 0x07
 ade:	26 83       	std	Z+6, r18	; 0x06
 ae0:	14 c0       	rjmp	.+40     	; 0xb0a <fputc+0x6e>
 ae2:	8b 01       	movw	r16, r22
 ae4:	ec 01       	movw	r28, r24
 ae6:	fb 01       	movw	r30, r22
 ae8:	00 84       	ldd	r0, Z+8	; 0x08
 aea:	f1 85       	ldd	r31, Z+9	; 0x09
 aec:	e0 2d       	mov	r30, r0
 aee:	09 95       	icall
 af0:	89 2b       	or	r24, r25
 af2:	e1 f6       	brne	.-72     	; 0xaac <fputc+0x10>
 af4:	d8 01       	movw	r26, r16
 af6:	16 96       	adiw	r26, 0x06	; 6
 af8:	8d 91       	ld	r24, X+
 afa:	9c 91       	ld	r25, X
 afc:	17 97       	sbiw	r26, 0x07	; 7
 afe:	01 96       	adiw	r24, 0x01	; 1
 b00:	17 96       	adiw	r26, 0x07	; 7
 b02:	9c 93       	st	X, r25
 b04:	8e 93       	st	-X, r24
 b06:	16 97       	sbiw	r26, 0x06	; 6
 b08:	ce 01       	movw	r24, r28
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	1f 91       	pop	r17
 b10:	0f 91       	pop	r16
 b12:	08 95       	ret

00000b14 <__ultoa_invert>:
 b14:	fa 01       	movw	r30, r20
 b16:	aa 27       	eor	r26, r26
 b18:	28 30       	cpi	r18, 0x08	; 8
 b1a:	51 f1       	breq	.+84     	; 0xb70 <__ultoa_invert+0x5c>
 b1c:	20 31       	cpi	r18, 0x10	; 16
 b1e:	81 f1       	breq	.+96     	; 0xb80 <__ultoa_invert+0x6c>
 b20:	e8 94       	clt
 b22:	6f 93       	push	r22
 b24:	6e 7f       	andi	r22, 0xFE	; 254
 b26:	6e 5f       	subi	r22, 0xFE	; 254
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	af 4f       	sbci	r26, 0xFF	; 255
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	3e d0       	rcall	.+124    	; 0xbb0 <__ultoa_invert+0x9c>
 b34:	b4 e0       	ldi	r27, 0x04	; 4
 b36:	3c d0       	rcall	.+120    	; 0xbb0 <__ultoa_invert+0x9c>
 b38:	67 0f       	add	r22, r23
 b3a:	78 1f       	adc	r23, r24
 b3c:	89 1f       	adc	r24, r25
 b3e:	9a 1f       	adc	r25, r26
 b40:	a1 1d       	adc	r26, r1
 b42:	68 0f       	add	r22, r24
 b44:	79 1f       	adc	r23, r25
 b46:	8a 1f       	adc	r24, r26
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	6a 0f       	add	r22, r26
 b4e:	71 1d       	adc	r23, r1
 b50:	81 1d       	adc	r24, r1
 b52:	91 1d       	adc	r25, r1
 b54:	a1 1d       	adc	r26, r1
 b56:	20 d0       	rcall	.+64     	; 0xb98 <__ultoa_invert+0x84>
 b58:	09 f4       	brne	.+2      	; 0xb5c <__ultoa_invert+0x48>
 b5a:	68 94       	set
 b5c:	3f 91       	pop	r19
 b5e:	2a e0       	ldi	r18, 0x0A	; 10
 b60:	26 9f       	mul	r18, r22
 b62:	11 24       	eor	r1, r1
 b64:	30 19       	sub	r19, r0
 b66:	30 5d       	subi	r19, 0xD0	; 208
 b68:	31 93       	st	Z+, r19
 b6a:	de f6       	brtc	.-74     	; 0xb22 <__ultoa_invert+0xe>
 b6c:	cf 01       	movw	r24, r30
 b6e:	08 95       	ret
 b70:	46 2f       	mov	r20, r22
 b72:	47 70       	andi	r20, 0x07	; 7
 b74:	40 5d       	subi	r20, 0xD0	; 208
 b76:	41 93       	st	Z+, r20
 b78:	b3 e0       	ldi	r27, 0x03	; 3
 b7a:	0f d0       	rcall	.+30     	; 0xb9a <__ultoa_invert+0x86>
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0x5c>
 b7e:	f6 cf       	rjmp	.-20     	; 0xb6c <__ultoa_invert+0x58>
 b80:	46 2f       	mov	r20, r22
 b82:	4f 70       	andi	r20, 0x0F	; 15
 b84:	40 5d       	subi	r20, 0xD0	; 208
 b86:	4a 33       	cpi	r20, 0x3A	; 58
 b88:	18 f0       	brcs	.+6      	; 0xb90 <__ultoa_invert+0x7c>
 b8a:	49 5d       	subi	r20, 0xD9	; 217
 b8c:	31 fd       	sbrc	r19, 1
 b8e:	40 52       	subi	r20, 0x20	; 32
 b90:	41 93       	st	Z+, r20
 b92:	02 d0       	rcall	.+4      	; 0xb98 <__ultoa_invert+0x84>
 b94:	a9 f7       	brne	.-22     	; 0xb80 <__ultoa_invert+0x6c>
 b96:	ea cf       	rjmp	.-44     	; 0xb6c <__ultoa_invert+0x58>
 b98:	b4 e0       	ldi	r27, 0x04	; 4
 b9a:	a6 95       	lsr	r26
 b9c:	97 95       	ror	r25
 b9e:	87 95       	ror	r24
 ba0:	77 95       	ror	r23
 ba2:	67 95       	ror	r22
 ba4:	ba 95       	dec	r27
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__ultoa_invert+0x86>
 ba8:	00 97       	sbiw	r24, 0x00	; 0
 baa:	61 05       	cpc	r22, r1
 bac:	71 05       	cpc	r23, r1
 bae:	08 95       	ret
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	0a 2e       	mov	r0, r26
 bb6:	06 94       	lsr	r0
 bb8:	57 95       	ror	r21
 bba:	47 95       	ror	r20
 bbc:	37 95       	ror	r19
 bbe:	27 95       	ror	r18
 bc0:	ba 95       	dec	r27
 bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__ultoa_invert+0xa2>
 bc4:	62 0f       	add	r22, r18
 bc6:	73 1f       	adc	r23, r19
 bc8:	84 1f       	adc	r24, r20
 bca:	95 1f       	adc	r25, r21
 bcc:	a0 1d       	adc	r26, r0
 bce:	08 95       	ret

00000bd0 <__prologue_saves__>:
 bd0:	2f 92       	push	r2
 bd2:	3f 92       	push	r3
 bd4:	4f 92       	push	r4
 bd6:	5f 92       	push	r5
 bd8:	6f 92       	push	r6
 bda:	7f 92       	push	r7
 bdc:	8f 92       	push	r8
 bde:	9f 92       	push	r9
 be0:	af 92       	push	r10
 be2:	bf 92       	push	r11
 be4:	cf 92       	push	r12
 be6:	df 92       	push	r13
 be8:	ef 92       	push	r14
 bea:	ff 92       	push	r15
 bec:	0f 93       	push	r16
 bee:	1f 93       	push	r17
 bf0:	cf 93       	push	r28
 bf2:	df 93       	push	r29
 bf4:	cd b7       	in	r28, 0x3d	; 61
 bf6:	de b7       	in	r29, 0x3e	; 62
 bf8:	ca 1b       	sub	r28, r26
 bfa:	db 0b       	sbc	r29, r27
 bfc:	0f b6       	in	r0, 0x3f	; 63
 bfe:	f8 94       	cli
 c00:	de bf       	out	0x3e, r29	; 62
 c02:	0f be       	out	0x3f, r0	; 63
 c04:	cd bf       	out	0x3d, r28	; 61
 c06:	09 94       	ijmp

00000c08 <__epilogue_restores__>:
 c08:	2a 88       	ldd	r2, Y+18	; 0x12
 c0a:	39 88       	ldd	r3, Y+17	; 0x11
 c0c:	48 88       	ldd	r4, Y+16	; 0x10
 c0e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c10:	6e 84       	ldd	r6, Y+14	; 0x0e
 c12:	7d 84       	ldd	r7, Y+13	; 0x0d
 c14:	8c 84       	ldd	r8, Y+12	; 0x0c
 c16:	9b 84       	ldd	r9, Y+11	; 0x0b
 c18:	aa 84       	ldd	r10, Y+10	; 0x0a
 c1a:	b9 84       	ldd	r11, Y+9	; 0x09
 c1c:	c8 84       	ldd	r12, Y+8	; 0x08
 c1e:	df 80       	ldd	r13, Y+7	; 0x07
 c20:	ee 80       	ldd	r14, Y+6	; 0x06
 c22:	fd 80       	ldd	r15, Y+5	; 0x05
 c24:	0c 81       	ldd	r16, Y+4	; 0x04
 c26:	1b 81       	ldd	r17, Y+3	; 0x03
 c28:	aa 81       	ldd	r26, Y+2	; 0x02
 c2a:	b9 81       	ldd	r27, Y+1	; 0x01
 c2c:	ce 0f       	add	r28, r30
 c2e:	d1 1d       	adc	r29, r1
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	de bf       	out	0x3e, r29	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	cd bf       	out	0x3d, r28	; 61
 c3a:	ed 01       	movw	r28, r26
 c3c:	08 95       	ret

00000c3e <_exit>:
 c3e:	f8 94       	cli

00000c40 <__stop_program>:
 c40:	ff cf       	rjmp	.-2      	; 0xc40 <__stop_program>
