
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000d56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800152  00800152  00000e3c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017da  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5a  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d88  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00004384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a4  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c61  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_18>
  4c:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  9e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_Start>:
#include "DHT11.h"


uint8_t data[5];
void DHT11_Start(){
	DDRC |= (1<<DHT11_PIN);				// Bus de salida para mandar la señal de inicio
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<DHT11_PIN);			// Cambia el nivel del bus a bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 ee       	ldi	r24, 0xE0	; 224
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_Start+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_Start+0x1c>
  c2:	00 00       	nop
	_delay_ms(18);						// Tiene que esperar al menos 18ms para que el sensor lo detecte
	PORTC |= (1<<DHT11_PIN);			// Vuelve a subir el nivel del bus a alto - deberia esperar 20-40microsegundos pero calculo q eso lo hace el programa?
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	08 95       	ret

000000cc <DHT11_Response>:
}

void DHT11_Response(){
	DDRC &= ~(1<<DHT11_PIN);			// Bus de entrada para recibir señal de respuesta
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	87 b9       	out	0x07, r24	; 7
	while(PINC & (1<<DHT11_PIN));		// La señal de respuesta del DHT11 empieza en bajo, por lo que espera a que la misma empiece
  d2:	30 99       	sbic	0x06, 0	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <DHT11_Response+0x6>
	while((PINC & (1<<DHT11_PIN))==0);	// Mientras el bus este en nivel bajo, espera -> Mientras se esté transmitiendo la señal de respuesta espera (aprox 80 microsegundos)
  d6:	30 9b       	sbis	0x06, 0	; 6
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <DHT11_Response+0xa>
	while(PINC & (1<<DHT11_PIN));		// El DHT sube el nivel y lo mantiene por 80 us, despues empieza la transmision de datos.
  da:	30 99       	sbic	0x06, 0	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <DHT11_Response+0xe>
}
  de:	08 95       	ret

000000e0 <DHT11_Read_byte>:

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
	for(int i=0;i<8;i++){						//por cada bit recibido
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
	while((PINC & (1<<DHT11_PIN))==0);	// Mientras el bus este en nivel bajo, espera -> Mientras se esté transmitiendo la señal de respuesta espera (aprox 80 microsegundos)
	while(PINC & (1<<DHT11_PIN));		// El DHT sube el nivel y lo mantiene por 80 us, despues empieza la transmision de datos.
}

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0;i<8;i++){						//por cada bit recibido
  e6:	12 c0       	rjmp	.+36     	; 0x10c <DHT11_Read_byte+0x2c>
		while((PINC & (1<<DHT11_PIN)) == 0);	//Se mantiene durante 50 us en el while esperando a que termine la señal de inicio de transmision de bit y el bus queda en ALTO
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <DHT11_Read_byte+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	9a e9       	ldi	r25, 0x9A	; 154
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <DHT11_Read_byte+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <DHT11_Read_byte+0x14>
		_delay_us(29);							//Espera durante 29 microsegundos						
		if(PINC & (1<<DHT11_PIN)){				//Si al salir del delay el bus sigue en alto, quiere decir que es un 1.
  f4:	30 9b       	sbis	0x06, 0	; 6
  f6:	07 c0       	rjmp	.+14     	; 0x106 <DHT11_Read_byte+0x26>
			data = ((data<<1) | 1);
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	81 60       	ori	r24, 0x01	; 1
			while(PINC & (1<<DHT11_PIN));			//Espera a que pase la señal en ALTO del 1 (estará aprox 40 microsegundos esperando) -> probar como queda en el IF del 1
 100:	30 99       	sbic	0x06, 0	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <DHT11_Read_byte+0x20>
 104:	01 c0       	rjmp	.+2      	; 0x108 <DHT11_Read_byte+0x28>
	
		}
		else{									//Si al salir del delay el bus vuelve a estar en BAJO, entonces pasaron los 26-28 microsegundos de ALTO que indicarian un 0
			data = (data<<1);
 106:	88 0f       	add	r24, r24
	while(PINC & (1<<DHT11_PIN));		// El DHT sube el nivel y lo mantiene por 80 us, despues empieza la transmision de datos.
}

uint8_t DHT11_Read_byte(){
	uint8_t data = 0;
	for(int i=0;i<8;i++){						//por cada bit recibido
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	28 30       	cpi	r18, 0x08	; 8
 10e:	31 05       	cpc	r19, r1
 110:	5c f3       	brlt	.-42     	; 0xe8 <DHT11_Read_byte+0x8>
		}
		else{									//Si al salir del delay el bus vuelve a estar en BAJO, entonces pasaron los 26-28 microsegundos de ALTO que indicarian un 0
			data = (data<<1);
		}}
	return data;
}
 112:	08 95       	ret

00000114 <DHT11_Read_data>:

uint8_t DHT11_Read_data(char* hum, char* temp){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	f8 2e       	mov	r15, r24
 122:	e9 2e       	mov	r14, r25
 124:	16 2f       	mov	r17, r22
 126:	07 2f       	mov	r16, r23
	uint8_t checksum = 0;
	DHT11_Start();					//manda señal de inicio
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Start>
	DHT11_Response();				//espera señal de respuesta del sensor
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <DHT11_Response>
	//Inicio de transmisión de datos
	data[0] = DHT11_Read_byte();	//humedad int
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 134:	c3 e8       	ldi	r28, 0x83	; 131
 136:	d2 e0       	ldi	r29, 0x02	; 2
 138:	88 83       	st	Y, r24
	data[1] = DHT11_Read_byte();	//humedad dec
 13a:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 13e:	89 83       	std	Y+1, r24	; 0x01
	data[2] = DHT11_Read_byte();	//temp int
 140:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 144:	8a 83       	std	Y+2, r24	; 0x02
	data[3] = DHT11_Read_byte();	//temp dec
 146:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 14a:	8b 83       	std	Y+3, r24	; 0x03
	data[4] = DHT11_Read_byte();	//checksum
 14c:	0e 94 70 00 	call	0xe0	; 0xe0 <DHT11_Read_byte>
 150:	8c 83       	std	Y+4, r24	; 0x04
	//Fin de trama 5*8bits = 40bits
	
	
	DDRC |= 1<<DHT11_PIN;			//Se configura el pin como salida
 152:	97 b1       	in	r25, 0x07	; 7
 154:	91 60       	ori	r25, 0x01	; 1
 156:	97 b9       	out	0x07, r25	; 7
	//PORTC |= 1<<DHT11_PIN;			//Se pone el nivel del bus en ALTO (free)
	
	//chequeo de datos recibidos 
	checksum = data[0] + data[1] + data[2] + data[3];
 158:	38 81       	ld	r19, Y
 15a:	49 81       	ldd	r20, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	2b 81       	ldd	r18, Y+3	; 0x03
 160:	53 2f       	mov	r21, r19
 162:	54 0f       	add	r21, r20
 164:	95 0f       	add	r25, r21
 166:	92 0f       	add	r25, r18
 
	if (checksum == data[4]){
 168:	98 13       	cpse	r25, r24
 16a:	24 c0       	rjmp	.+72     	; 0x1b4 <DHT11_Read_data+0xa0>
		sprintf(hum, "%2d.%1d",data[0],data[1]);
 16c:	1f 92       	push	r1
 16e:	4f 93       	push	r20
 170:	1f 92       	push	r1
 172:	3f 93       	push	r19
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d1 e0       	ldi	r29, 0x01	; 1
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0e 94 bf 03 	call	0x77e	; 0x77e <sprintf>
		sprintf(temp, "%2d.%1d",data[2],data[3]);
 184:	e3 e8       	ldi	r30, 0x83	; 131
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	93 81       	ldd	r25, Z+3	; 0x03
 18a:	82 81       	ldd	r24, Z+2	; 0x02
 18c:	1f 92       	push	r1
 18e:	9f 93       	push	r25
 190:	1f 92       	push	r1
 192:	8f 93       	push	r24
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	0e 94 bf 03 	call	0x77e	; 0x77e <sprintf>
		return 1;
 1a0:	8d b7       	in	r24, 0x3d	; 61
 1a2:	9e b7       	in	r25, 0x3e	; 62
 1a4:	40 96       	adiw	r24, 0x10	; 16
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	9e bf       	out	0x3e, r25	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	8d bf       	out	0x3d, r24	; 61
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DHT11_Read_data+0xa2>
	}
	else{
		return 0;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
	}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <I2C_Init>:
#include "I2C.h"

void I2C_Init(void) {
  TWSR = 0x00;
 1c4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = 152;
 1c8:	88 e9       	ldi	r24, 0x98	; 152
 1ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  TWCR = 0x04;
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	08 95       	ret

000001d6 <I2C_Start>:
}

void I2C_Start(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 1d6:	84 ea       	ldi	r24, 0xA4	; 164
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while ((TWCR & (1 << TWINT)) == 0);
 1dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e0:	88 23       	and	r24, r24
 1e2:	e4 f7       	brge	.-8      	; 0x1dc <I2C_Start+0x6>
}
 1e4:	08 95       	ret

000001e6 <I2C_Stop>:

void I2C_Stop() {
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 1e6:	84 e9       	ldi	r24, 0x94	; 148
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ec:	08 95       	ret

000001ee <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 1ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<< TWINT) |(1<<TWEN);
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 <<TWINT)) == 0);
 1f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fc:	88 23       	and	r24, r24
 1fe:	e4 f7       	brge	.-8      	; 0x1f8 <I2C_Write+0xa>
}
 200:	08 95       	ret

00000202 <I2C_Read_ack>:

uint8_t I2C_Read_ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 202:	84 ec       	ldi	r24, 0xC4	; 196
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 208:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	88 23       	and	r24, r24
 20e:	e4 f7       	brge	.-8      	; 0x208 <I2C_Read_ack+0x6>
	return TWDR;
 210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 214:	08 95       	ret

00000216 <I2C_Read_nack>:

uint8_t I2C_Read_nack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
 216:	84 e8       	ldi	r24, 0x84	; 132
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 21c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 220:	88 23       	and	r24, r24
 222:	e4 f7       	brge	.-8      	; 0x21c <I2C_Read_nack+0x6>
	return TWDR;
 224:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 228:	08 95       	ret

0000022a <main>:

#include "main.h"

 
int main(void) {
    UART_init(0x67); // baud rate calculado para 9600 bps
 22a:	87 e6       	ldi	r24, 0x67	; 103
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 09 03 	call	0x612	; 0x612 <UART_init>
    DHT11_Start();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Start>
    I2C_Init();
 236:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Init>
    RTC_setup();
 23a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <RTC_setup>
	SEOS_Init_Timer();
 23e:	0e 94 1a 02 	call	0x434	; 0x434 <SEOS_Init_Timer>
	
	sei();
 242:	78 94       	sei
    while (1) {
		SEOS_Dispatch_Tasks();
 244:	0e 94 df 02 	call	0x5be	; 0x5be <SEOS_Dispatch_Tasks>
 248:	fd cf       	rjmp	.-6      	; 0x244 <main+0x1a>

0000024a <decToBcd>:
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 1); // Dirección de lectura
    status = I2C_Read_nack();
    I2C_Stop();

    return !(status & 0x80); // Si el bit OSF (Oscillator Stop Flag) está bajo, el RTC está corriendo
}
 24a:	9d ec       	ldi	r25, 0xCD	; 205
 24c:	89 9f       	mul	r24, r25
 24e:	91 2d       	mov	r25, r1
 250:	11 24       	eor	r1, r1
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
 256:	96 95       	lsr	r25
 258:	39 2f       	mov	r19, r25
 25a:	33 0f       	add	r19, r19
 25c:	23 2f       	mov	r18, r19
 25e:	22 0f       	add	r18, r18
 260:	22 0f       	add	r18, r18
 262:	23 0f       	add	r18, r19
 264:	82 1b       	sub	r24, r18
 266:	20 e1       	ldi	r18, 0x10	; 16
 268:	92 9f       	mul	r25, r18
 26a:	80 0d       	add	r24, r0
 26c:	11 24       	eor	r1, r1
 26e:	08 95       	ret

00000270 <bcdToDec>:
 270:	98 2f       	mov	r25, r24
 272:	92 95       	swap	r25
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	99 0f       	add	r25, r25
 278:	29 2f       	mov	r18, r25
 27a:	22 0f       	add	r18, r18
 27c:	22 0f       	add	r18, r18
 27e:	92 0f       	add	r25, r18
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	89 0f       	add	r24, r25
 284:	08 95       	ret

00000286 <RTC_setDateTime>:

void RTC_setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	c8 2f       	mov	r28, r24
 294:	d6 2f       	mov	r29, r22
 296:	14 2f       	mov	r17, r20
 298:	f2 2e       	mov	r15, r18
    I2C_Start();
 29a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Start>
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 0); // Dirección de escritura
 29e:	80 ed       	ldi	r24, 0xD0	; 208
 2a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(0); // Comienza en la dirección 0x00
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(second));
 2aa:	8e 2d       	mov	r24, r14
 2ac:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(minute));
 2b4:	80 2f       	mov	r24, r16
 2b6:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(hour));
 2be:	8f 2d       	mov	r24, r15
 2c0:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2c4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(0); // Día de la semana (no se usa)
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(day));
 2ce:	81 2f       	mov	r24, r17
 2d0:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2d4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(month));
 2d8:	8d 2f       	mov	r24, r29
 2da:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2de:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(decToBcd(year));
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 25 01 	call	0x24a	; 0x24a <decToBcd>
 2e8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Stop();
 2ec:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Stop>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	08 95       	ret

000002fe <RTC_getDateTime>:

void RTC_getDateTime(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 2fe:	8f 92       	push	r8
 300:	9f 92       	push	r9
 302:	af 92       	push	r10
 304:	bf 92       	push	r11
 306:	cf 92       	push	r12
 308:	df 92       	push	r13
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	6b 01       	movw	r12, r22
 31a:	5a 01       	movw	r10, r20
 31c:	49 01       	movw	r8, r18
    I2C_Start();
 31e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Start>
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 0); // Dirección de escritura
 322:	80 ed       	ldi	r24, 0xD0	; 208
 324:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Write(0); // Comienza en la dirección 0x00
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    I2C_Stop();
 32e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Stop>
    I2C_Start();
 332:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Start>
    I2C_Write((DS3231_I2C_ADDRESS << 1) | 1); // Dirección de lectura
 336:	81 ed       	ldi	r24, 0xD1	; 209
 338:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Write>
    *second = bcdToDec(I2C_Read_ack());
 33c:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
 340:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 344:	f7 01       	movw	r30, r14
 346:	80 83       	st	Z, r24
    *minute = bcdToDec(I2C_Read_ack());
 348:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
 34c:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 350:	f8 01       	movw	r30, r16
 352:	80 83       	st	Z, r24
    *hour = bcdToDec(I2C_Read_ack());
 354:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
 358:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 35c:	f4 01       	movw	r30, r8
 35e:	80 83       	st	Z, r24
    I2C_Read_ack(); // Día de la semana (no se usa)
 360:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
    *day = bcdToDec(I2C_Read_ack());
 364:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
 368:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 36c:	f5 01       	movw	r30, r10
 36e:	80 83       	st	Z, r24
    *month = bcdToDec(I2C_Read_ack());
 370:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read_ack>
 374:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 378:	f6 01       	movw	r30, r12
 37a:	80 83       	st	Z, r24
    *year = bcdToDec(I2C_Read_nack());
 37c:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Read_nack>
 380:	0e 94 38 01 	call	0x270	; 0x270 <bcdToDec>
 384:	88 83       	st	Y, r24
    I2C_Stop();
 386:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Stop>
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	08 95       	ret

000003a4 <RTC_setup>:

void RTC_setup() {
 3a4:	ef 92       	push	r14
 3a6:	0f 93       	push	r16
    // Verificar si el RTC está corriendo
        // Configurar la fecha y hora iniciales
        RTC_setDateTime(24, 6, 14, 22, 12, 0); // Configuración inicial
 3a8:	e1 2c       	mov	r14, r1
 3aa:	0c e0       	ldi	r16, 0x0C	; 12
 3ac:	26 e1       	ldi	r18, 0x16	; 22
 3ae:	4e e0       	ldi	r20, 0x0E	; 14
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	0e 94 43 01 	call	0x286	; 0x286 <RTC_setDateTime>
    
}
 3b8:	0f 91       	pop	r16
 3ba:	ef 90       	pop	r14
 3bc:	08 95       	ret

000003be <SEOS_Scheduler_Tasks>:
	SEOS_Scheduler_Tasks();
}


void SEOS_Scheduler_Tasks(){
	contDHT++;
 3be:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 3c2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 3cc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	if (contDHT == CANT_INT_DHT){ //si el timer es de 0.5 segundos, a la 4 interrupcion llega a los 2 segundos
 3d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 3d4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 3d8:	02 97       	sbiw	r24, 0x02	; 2
 3da:	39 f4       	brne	.+14     	; 0x3ea <SEOS_Scheduler_Tasks+0x2c>
		Flag_DHT = 1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Flag_DHT>
		contDHT = 0;
 3e2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
 3e6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
 3ea:	08 95       	ret

000003ec <__vector_11>:

	
}


ISR (TIMER1_COMPA_vect){ //cada medio segundo
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	SEOS_Scheduler_Tasks();
 40e:	0e 94 df 01 	call	0x3be	; 0x3be <SEOS_Scheduler_Tasks>
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <SEOS_Init_Timer>:
	}
}


void SEOS_Init_Timer() {				  //Configuracion del Timer de 10Ms 
    TCCR1B |= (1 << WGM12);               // Configura el modo CTC (Clear Timer on Compare Match)
 434:	e1 e8       	ldi	r30, 0x81	; 129
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	88 60       	ori	r24, 0x08	; 8
 43c:	80 83       	st	Z, r24
    TCCR1B |= (1 << CS12);				  // Configura el preescalador a 64
 43e:	80 81       	ld	r24, Z
 440:	84 60       	ori	r24, 0x04	; 4
 442:	80 83       	st	Z, r24
    OCR1A = CTC_OCR1A;                    // Establece el valor de comparación
 444:	83 e2       	ldi	r24, 0x23	; 35
 446:	94 ef       	ldi	r25, 0xF4	; 244
 448:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 44c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TIMSK1 |= (1 << OCIE1A);              // Habilita la interrupción de comparación A
 450:	ef e6       	ldi	r30, 0x6F	; 111
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	82 60       	ori	r24, 0x02	; 2
 458:	80 83       	st	Z, r24
 45a:	08 95       	ret

0000045c <updateTerminal>:
}


void updateTerminal(){
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	ce 53       	subi	r28, 0x3E	; 62
 46e:	d1 40       	sbci	r29, 0x01	; 1
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
	// Variables para almacenar los datos de humedad y temperatura
	char hum[6];
	char temp[6];

	uint8_t year, month, day, hour, minute, second;
	RTC_getDateTime(&year, &month, &day, &hour, &minute, &second);      
 47a:	ce 01       	movw	r24, r28
 47c:	82 5c       	subi	r24, 0xC2	; 194
 47e:	9e 4f       	sbci	r25, 0xFE	; 254
 480:	7c 01       	movw	r14, r24
 482:	8e 01       	movw	r16, r28
 484:	03 5c       	subi	r16, 0xC3	; 195
 486:	1e 4f       	sbci	r17, 0xFE	; 254
 488:	9e 01       	movw	r18, r28
 48a:	24 5c       	subi	r18, 0xC4	; 196
 48c:	3e 4f       	sbci	r19, 0xFE	; 254
 48e:	ae 01       	movw	r20, r28
 490:	45 5c       	subi	r20, 0xC5	; 197
 492:	5e 4f       	sbci	r21, 0xFE	; 254
 494:	be 01       	movw	r22, r28
 496:	66 5c       	subi	r22, 0xC6	; 198
 498:	7e 4f       	sbci	r23, 0xFE	; 254
 49a:	05 97       	sbiw	r24, 0x05	; 5
 49c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <RTC_getDateTime>
	        
	sprintf(resultado, "Fecha: %02d/%02d/%02d Hora: %02d:%02d:%02d\n\r", day, month, year, hour, minute, second);
 4a0:	c2 5c       	subi	r28, 0xC2	; 194
 4a2:	de 4f       	sbci	r29, 0xFE	; 254
 4a4:	88 81       	ld	r24, Y
 4a6:	ce 53       	subi	r28, 0x3E	; 62
 4a8:	d1 40       	sbci	r29, 0x01	; 1
 4aa:	1f 92       	push	r1
 4ac:	8f 93       	push	r24
 4ae:	c3 5c       	subi	r28, 0xC3	; 195
 4b0:	de 4f       	sbci	r29, 0xFE	; 254
 4b2:	88 81       	ld	r24, Y
 4b4:	cd 53       	subi	r28, 0x3D	; 61
 4b6:	d1 40       	sbci	r29, 0x01	; 1
 4b8:	1f 92       	push	r1
 4ba:	8f 93       	push	r24
 4bc:	c4 5c       	subi	r28, 0xC4	; 196
 4be:	de 4f       	sbci	r29, 0xFE	; 254
 4c0:	88 81       	ld	r24, Y
 4c2:	cc 53       	subi	r28, 0x3C	; 60
 4c4:	d1 40       	sbci	r29, 0x01	; 1
 4c6:	1f 92       	push	r1
 4c8:	8f 93       	push	r24
 4ca:	c7 5c       	subi	r28, 0xC7	; 199
 4cc:	de 4f       	sbci	r29, 0xFE	; 254
 4ce:	88 81       	ld	r24, Y
 4d0:	c9 53       	subi	r28, 0x39	; 57
 4d2:	d1 40       	sbci	r29, 0x01	; 1
 4d4:	1f 92       	push	r1
 4d6:	8f 93       	push	r24
 4d8:	c6 5c       	subi	r28, 0xC6	; 198
 4da:	de 4f       	sbci	r29, 0xFE	; 254
 4dc:	88 81       	ld	r24, Y
 4de:	ca 53       	subi	r28, 0x3A	; 58
 4e0:	d1 40       	sbci	r29, 0x01	; 1
 4e2:	1f 92       	push	r1
 4e4:	8f 93       	push	r24
 4e6:	c5 5c       	subi	r28, 0xC5	; 197
 4e8:	de 4f       	sbci	r29, 0xFE	; 254
 4ea:	88 81       	ld	r24, Y
 4ec:	cb 53       	subi	r28, 0x3B	; 59
 4ee:	d1 40       	sbci	r29, 0x01	; 1
 4f0:	1f 92       	push	r1
 4f2:	8f 93       	push	r24
 4f4:	88 e0       	ldi	r24, 0x08	; 8
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	9f 93       	push	r25
 4fa:	8f 93       	push	r24
 4fc:	0c 53       	subi	r16, 0x3C	; 60
 4fe:	11 40       	sbci	r17, 0x01	; 1
 500:	1f 93       	push	r17
 502:	0f 93       	push	r16
 504:	0e 94 bf 03 	call	0x77e	; 0x77e <sprintf>
	        
			
	// Leer los valores de humedad y temperatura del DHT11
	DHT11_Read_data(hum, temp);
 508:	be 01       	movw	r22, r28
 50a:	6d 5c       	subi	r22, 0xCD	; 205
 50c:	7e 4f       	sbci	r23, 0xFE	; 254
 50e:	ce 01       	movw	r24, r28
 510:	83 5d       	subi	r24, 0xD3	; 211
 512:	9e 4f       	sbci	r25, 0xFE	; 254
 514:	0e 94 8a 00 	call	0x114	; 0x114 <DHT11_Read_data>
	// Transmitir los valores de humedad y temperatura por UART
	//UART_transmit_string("Humedad: ");
	strcat(resultado,"Humedad: ");
 518:	d8 01       	movw	r26, r16
 51a:	0d 90       	ld	r0, X+
 51c:	00 20       	and	r0, r0
 51e:	e9 f7       	brne	.-6      	; 0x51a <updateTerminal+0xbe>
 520:	11 97       	sbiw	r26, 0x01	; 1
 522:	8a e0       	ldi	r24, 0x0A	; 10
 524:	e5 e3       	ldi	r30, 0x35	; 53
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <updateTerminal+0xcc>
	//UART_transmit_string(hum);
	strcat(resultado,hum);
 530:	be 01       	movw	r22, r28
 532:	63 5d       	subi	r22, 0xD3	; 211
 534:	7e 4f       	sbci	r23, 0xFE	; 254
 536:	c8 01       	movw	r24, r16
 538:	0e 94 b4 03 	call	0x768	; 0x768 <strcat>
	//UART_transmit_string("%\n\r");
	strcat(resultado,"%\n\r");
 53c:	f8 01       	movw	r30, r16
 53e:	01 90       	ld	r0, Z+
 540:	00 20       	and	r0, r0
 542:	e9 f7       	brne	.-6      	; 0x53e <updateTerminal+0xe2>
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	85 e2       	ldi	r24, 0x25	; 37
 548:	9a e0       	ldi	r25, 0x0A	; 10
 54a:	91 83       	std	Z+1, r25	; 0x01
 54c:	80 83       	st	Z, r24
 54e:	8d e0       	ldi	r24, 0x0D	; 13
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	93 83       	std	Z+3, r25	; 0x03
 554:	82 83       	std	Z+2, r24	; 0x02

	//UART_transmit_string("Temperatura: ");
	strcat(resultado,"Temperatura: ");
 556:	d8 01       	movw	r26, r16
 558:	0d 90       	ld	r0, X+
 55a:	00 20       	and	r0, r0
 55c:	e9 f7       	brne	.-6      	; 0x558 <updateTerminal+0xfc>
 55e:	11 97       	sbiw	r26, 0x01	; 1
 560:	8e e0       	ldi	r24, 0x0E	; 14
 562:	ef e3       	ldi	r30, 0x3F	; 63
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	01 90       	ld	r0, Z+
 568:	0d 92       	st	X+, r0
 56a:	8a 95       	dec	r24
 56c:	e1 f7       	brne	.-8      	; 0x566 <updateTerminal+0x10a>
	//UART_transmit_string(temp);
	strcat(resultado,temp);
 56e:	be 01       	movw	r22, r28
 570:	6d 5c       	subi	r22, 0xCD	; 205
 572:	7e 4f       	sbci	r23, 0xFE	; 254
 574:	c8 01       	movw	r24, r16
 576:	0e 94 b4 03 	call	0x768	; 0x768 <strcat>
	//UART_transmit_string("C\n\r");
	strcat(resultado,"C\n\r\r");
 57a:	d8 01       	movw	r26, r16
 57c:	0d 90       	ld	r0, X+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <updateTerminal+0x120>
 582:	11 97       	sbiw	r26, 0x01	; 1
 584:	85 e0       	ldi	r24, 0x05	; 5
 586:	ed e4       	ldi	r30, 0x4D	; 77
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	01 90       	ld	r0, Z+
 58c:	0d 92       	st	X+, r0
 58e:	8a 95       	dec	r24
 590:	e1 f7       	brne	.-8      	; 0x58a <updateTerminal+0x12e>
	        
	// Transmision por UART
	UART_transmit_string(resultado);
 592:	c8 01       	movw	r24, r16
 594:	0e 94 2b 03 	call	0x656	; 0x656 <UART_transmit_string>
	resultado[0]='\0';
	        
}
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	c2 5c       	subi	r28, 0xC2	; 194
 5a4:	de 4f       	sbci	r29, 0xFE	; 254
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	08 95       	ret

000005be <SEOS_Dispatch_Tasks>:
volatile unsigned char Flag_DHT = 0; //cada 2 segundos

volatile unsigned int contDHT = 0;

void SEOS_Dispatch_Tasks(){
	if(Flag_DHT){
 5be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Flag_DHT>
 5c2:	88 23       	and	r24, r24
 5c4:	21 f0       	breq	.+8      	; 0x5ce <SEOS_Dispatch_Tasks+0x10>
		updateTerminal();
 5c6:	0e 94 2e 02 	call	0x45c	; 0x45c <updateTerminal>
		Flag_DHT = 0;
 5ca:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <Flag_DHT>
 5ce:	08 95       	ret

000005d0 <SerialPort_TX_Enable>:

// Espera hasta que el buffer de RX este completo.
void SerialPort_Wait_Until_New_Data(void){
	// Pooling - Bloqueante, puede durar indefinidamente!
	while(!(UCSR0A & (1<<RXC0)));
}
 5d0:	e1 ec       	ldi	r30, 0xC1	; 193
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	88 60       	ori	r24, 0x08	; 8
 5d8:	80 83       	st	Z, r24
 5da:	08 95       	ret

000005dc <SerialPort_TX_Interrupt_Enable>:
 5dc:	e1 ec       	ldi	r30, 0xC1	; 193
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	80 83       	st	Z, r24
 5e6:	08 95       	ret

000005e8 <SerialPort_TX_Interrupt_Disable>:
 5e8:	e1 ec       	ldi	r30, 0xC1	; 193
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	8f 7d       	andi	r24, 0xDF	; 223
 5f0:	80 83       	st	Z, r24
 5f2:	08 95       	ret

000005f4 <SerialPort_RX_Enable>:
 5f4:	e1 ec       	ldi	r30, 0xC1	; 193
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	80 83       	st	Z, r24
 5fe:	08 95       	ret

00000600 <SerialPort_RX_Interrupt_Enable>:
 600:	e1 ec       	ldi	r30, 0xC1	; 193
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	80 68       	ori	r24, 0x80	; 128
 608:	80 83       	st	Z, r24
 60a:	08 95       	ret

0000060c <SerialPort_Recive_Data>:


char SerialPort_Recive_Data(void){
	return UDR0;
 60c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 610:	08 95       	ret

00000612 <UART_init>:


void UART_init(uint16_t ubrr_value) {
	
	// Configuración de baud rate
	UBRR0H = (uint8_t)(ubrr_value >> 8); // Parte alta del UBRR
 612:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr_value;        // Parte baja del UBRR
 616:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Configuración: 8 bits de datos, sin paridad, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 61a:	86 e0       	ldi	r24, 0x06	; 6
 61c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	//SerialPort_Init(ubrr_value);
	SerialPort_TX_Enable();		// Activo el Transmisor del Puerto Serie
 620:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SerialPort_TX_Enable>
	TX_enabled=1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TX_enabled>
	SerialPort_RX_Enable();		// Activo el Receptor del Puerto Serie
 62a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion
 62e:	0e 94 00 03 	call	0x600	; 0x600 <SerialPort_RX_Interrupt_Enable>
	// Habilitar transmisión y recepción
	//UCSR0B = (1 << TXEN0) | (1 << RXEN0);
	BUFFER_TX[0] = '/0';
 632:	80 e3       	ldi	r24, 0x30	; 48
 634:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <BUFFER_TX>
 638:	08 95       	ret

0000063a <UART_TX_Disable>:
}

void UART_TX_Disable(){
	UCSR0B &=~(1<<TXEN0);
 63a:	e1 ec       	ldi	r30, 0xC1	; 193
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	87 7f       	andi	r24, 0xF7	; 247
 642:	80 83       	st	Z, r24
	TX_enabled = 0;
 644:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TX_enabled>
 648:	08 95       	ret

0000064a <UART_TX_Enable>:
}

void UART_TX_Enable(){
	SerialPort_TX_Enable();
 64a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SerialPort_TX_Enable>
	TX_enabled = 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TX_enabled>
 654:	08 95       	ret

00000656 <UART_transmit_string>:
}

void UART_transmit_string(char* str) {
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ec 01       	movw	r28, r24
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
 65c:	88 81       	ld	r24, Y
 65e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <BUFFER_TX>
	SerialPort_TX_Interrupt_Enable();
 662:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_TX_Interrupt_Enable>
	TX_enabled = 1;
}

void UART_transmit_string(char* str) {
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
 666:	e1 e0       	ldi	r30, 0x01	; 1
	SerialPort_TX_Interrupt_Enable();
	while(str[i] != '\0' && i < BUFFER_SIZE){
 668:	06 c0       	rjmp	.+12     	; 0x676 <UART_transmit_string+0x20>
		BUFFER_TX[i] = str[i];
 66a:	ae 2f       	mov	r26, r30
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	a9 5a       	subi	r26, 0xA9	; 169
 670:	be 4f       	sbci	r27, 0xFE	; 254
 672:	8c 93       	st	X, r24
		i++;
 674:	ef 5f       	subi	r30, 0xFF	; 255

void UART_transmit_string(char* str) {
	uint8_t i=0;
	BUFFER_TX[i] = str[i++];
	SerialPort_TX_Interrupt_Enable();
	while(str[i] != '\0' && i < BUFFER_SIZE){
 676:	de 01       	movw	r26, r28
 678:	ae 0f       	add	r26, r30
 67a:	b1 1d       	adc	r27, r1
 67c:	8c 91       	ld	r24, X
 67e:	81 11       	cpse	r24, r1
 680:	f4 cf       	rjmp	.-24     	; 0x66a <UART_transmit_string+0x14>
		BUFFER_TX[i] = str[i];
		i++;
	}
	 BUFFER_TX[i] = '\0';
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	e9 5a       	subi	r30, 0xA9	; 169
 686:	fe 4f       	sbci	r31, 0xFE	; 254
 688:	10 82       	st	Z, r1
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <__vector_19>:


// Manjeador de interrupciones de buffer vacio -> cuando interrumpe tiene que mandar mas datos para transmitir (asignar a UDR0)
ISR(USART_UDRE_vect){ //Interrupcion de que se puede transmitir en la UART
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	
	static uint8_t i=0;
	if (BUFFER_TX[i] != '\0'){
 6b2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <i.1790>
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	fc 01       	movw	r30, r24
 6ba:	e9 5a       	subi	r30, 0xA9	; 169
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	20 81       	ld	r18, Z
 6c0:	22 23       	and	r18, r18
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__vector_19+0x4c>
		UDR0 = BUFFER_TX[i];
 6c4:	fc 01       	movw	r30, r24
 6c6:	e9 5a       	subi	r30, 0xA9	; 169
 6c8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ca:	80 81       	ld	r24, Z
 6cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		i++;
 6d0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <i.1790>
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <i.1790>
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <__vector_19+0x54>
		
	}
	else{
		 //Desactivo las interrupciones de transmision
		i=0;
 6dc:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <i.1790>
		SerialPort_TX_Interrupt_Disable();
 6e0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SerialPort_TX_Interrupt_Disable>
	}
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_18>:

//Manejo de interrupciones de lectura terminada
ISR(USART_RX_vect){
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
	char data = SerialPort_Recive_Data(); //Leo caracter desde el registro de datos del UART
 728:	0e 94 06 03 	call	0x60c	; 0x60c <SerialPort_Recive_Data>
	
	if (data=='s' || data=='S'){
 72c:	83 37       	cpi	r24, 0x73	; 115
 72e:	11 f0       	breq	.+4      	; 0x734 <__vector_18+0x2e>
 730:	83 35       	cpi	r24, 0x53	; 83
 732:	49 f4       	brne	.+18     	; 0x746 <__vector_18+0x40>
		if (TX_enabled){
 734:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <TX_enabled>
 738:	88 23       	and	r24, r24
 73a:	19 f0       	breq	.+6      	; 0x742 <__vector_18+0x3c>
			UART_TX_Disable(); //Si estan activadas, las desactivo
 73c:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TX_Disable>
 740:	02 c0       	rjmp	.+4      	; 0x746 <__vector_18+0x40>
		}
		else{
			UART_TX_Enable(); //Si estan desactivadas, las activo
 742:	0e 94 25 03 	call	0x64a	; 0x64a <UART_TX_Enable>
			
		}
	}
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	bf 91       	pop	r27
 74c:	af 91       	pop	r26
 74e:	9f 91       	pop	r25
 750:	8f 91       	pop	r24
 752:	7f 91       	pop	r23
 754:	6f 91       	pop	r22
 756:	5f 91       	pop	r21
 758:	4f 91       	pop	r20
 75a:	3f 91       	pop	r19
 75c:	2f 91       	pop	r18
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <strcat>:
 768:	fb 01       	movw	r30, r22
 76a:	dc 01       	movw	r26, r24
 76c:	0d 90       	ld	r0, X+
 76e:	00 20       	and	r0, r0
 770:	e9 f7       	brne	.-6      	; 0x76c <strcat+0x4>
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	01 90       	ld	r0, Z+
 776:	0d 92       	st	X+, r0
 778:	00 20       	and	r0, r0
 77a:	e1 f7       	brne	.-8      	; 0x774 <strcat+0xc>
 77c:	08 95       	ret

0000077e <sprintf>:
 77e:	ae e0       	ldi	r26, 0x0E	; 14
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 ec       	ldi	r30, 0xC5	; 197
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__prologue_saves__+0x1c>
 78a:	0d 89       	ldd	r16, Y+21	; 0x15
 78c:	1e 89       	ldd	r17, Y+22	; 0x16
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	8c 83       	std	Y+4, r24	; 0x04
 792:	1a 83       	std	Y+2, r17	; 0x02
 794:	09 83       	std	Y+1, r16	; 0x01
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	9f e7       	ldi	r25, 0x7F	; 127
 79a:	9e 83       	std	Y+6, r25	; 0x06
 79c:	8d 83       	std	Y+5, r24	; 0x05
 79e:	ae 01       	movw	r20, r28
 7a0:	47 5e       	subi	r20, 0xE7	; 231
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	6f 89       	ldd	r22, Y+23	; 0x17
 7a6:	78 8d       	ldd	r23, Y+24	; 0x18
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vfprintf>
 7b0:	ef 81       	ldd	r30, Y+7	; 0x07
 7b2:	f8 85       	ldd	r31, Y+8	; 0x08
 7b4:	e0 0f       	add	r30, r16
 7b6:	f1 1f       	adc	r31, r17
 7b8:	10 82       	st	Z, r1
 7ba:	2e 96       	adiw	r28, 0x0e	; 14
 7bc:	e4 e0       	ldi	r30, 0x04	; 4
 7be:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__epilogue_restores__+0x1c>

000007c2 <vfprintf>:
 7c2:	ab e0       	ldi	r26, 0x0B	; 11
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e7 ee       	ldi	r30, 0xE7	; 231
 7c8:	f3 e0       	ldi	r31, 0x03	; 3
 7ca:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__prologue_saves__>
 7ce:	6c 01       	movw	r12, r24
 7d0:	7b 01       	movw	r14, r22
 7d2:	8a 01       	movw	r16, r20
 7d4:	fc 01       	movw	r30, r24
 7d6:	17 82       	std	Z+7, r1	; 0x07
 7d8:	16 82       	std	Z+6, r1	; 0x06
 7da:	83 81       	ldd	r24, Z+3	; 0x03
 7dc:	81 ff       	sbrs	r24, 1
 7de:	cc c1       	rjmp	.+920    	; 0xb78 <__stack+0x279>
 7e0:	ce 01       	movw	r24, r28
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	3c 01       	movw	r6, r24
 7e6:	f6 01       	movw	r30, r12
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	f7 01       	movw	r30, r14
 7ec:	93 fd       	sbrc	r25, 3
 7ee:	85 91       	lpm	r24, Z+
 7f0:	93 ff       	sbrs	r25, 3
 7f2:	81 91       	ld	r24, Z+
 7f4:	7f 01       	movw	r14, r30
 7f6:	88 23       	and	r24, r24
 7f8:	09 f4       	brne	.+2      	; 0x7fc <vfprintf+0x3a>
 7fa:	ba c1       	rjmp	.+884    	; 0xb70 <__stack+0x271>
 7fc:	85 32       	cpi	r24, 0x25	; 37
 7fe:	39 f4       	brne	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 800:	93 fd       	sbrc	r25, 3
 802:	85 91       	lpm	r24, Z+
 804:	93 ff       	sbrs	r25, 3
 806:	81 91       	ld	r24, Z+
 808:	7f 01       	movw	r14, r30
 80a:	85 32       	cpi	r24, 0x25	; 37
 80c:	29 f4       	brne	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	b6 01       	movw	r22, r12
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 816:	e7 cf       	rjmp	.-50     	; 0x7e6 <vfprintf+0x24>
 818:	91 2c       	mov	r9, r1
 81a:	21 2c       	mov	r2, r1
 81c:	31 2c       	mov	r3, r1
 81e:	ff e1       	ldi	r31, 0x1F	; 31
 820:	f3 15       	cp	r31, r3
 822:	d8 f0       	brcs	.+54     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 824:	8b 32       	cpi	r24, 0x2B	; 43
 826:	79 f0       	breq	.+30     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 828:	38 f4       	brcc	.+14     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82a:	80 32       	cpi	r24, 0x20	; 32
 82c:	79 f0       	breq	.+30     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 82e:	83 32       	cpi	r24, 0x23	; 35
 830:	a1 f4       	brne	.+40     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 832:	23 2d       	mov	r18, r3
 834:	20 61       	ori	r18, 0x10	; 16
 836:	1d c0       	rjmp	.+58     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 838:	8d 32       	cpi	r24, 0x2D	; 45
 83a:	61 f0       	breq	.+24     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	69 f4       	brne	.+26     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 840:	23 2d       	mov	r18, r3
 842:	21 60       	ori	r18, 0x01	; 1
 844:	16 c0       	rjmp	.+44     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 846:	83 2d       	mov	r24, r3
 848:	82 60       	ori	r24, 0x02	; 2
 84a:	38 2e       	mov	r3, r24
 84c:	e3 2d       	mov	r30, r3
 84e:	e4 60       	ori	r30, 0x04	; 4
 850:	3e 2e       	mov	r3, r30
 852:	2a c0       	rjmp	.+84     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 854:	f3 2d       	mov	r31, r3
 856:	f8 60       	ori	r31, 0x08	; 8
 858:	1d c0       	rjmp	.+58     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 85a:	37 fc       	sbrc	r3, 7
 85c:	2d c0       	rjmp	.+90     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 85e:	20 ed       	ldi	r18, 0xD0	; 208
 860:	28 0f       	add	r18, r24
 862:	2a 30       	cpi	r18, 0x0A	; 10
 864:	40 f0       	brcs	.+16     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 866:	8e 32       	cpi	r24, 0x2E	; 46
 868:	b9 f4       	brne	.+46     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 86a:	36 fc       	sbrc	r3, 6
 86c:	81 c1       	rjmp	.+770    	; 0xb70 <__stack+0x271>
 86e:	23 2d       	mov	r18, r3
 870:	20 64       	ori	r18, 0x40	; 64
 872:	32 2e       	mov	r3, r18
 874:	19 c0       	rjmp	.+50     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 876:	36 fe       	sbrs	r3, 6
 878:	06 c0       	rjmp	.+12     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 87a:	8a e0       	ldi	r24, 0x0A	; 10
 87c:	98 9e       	mul	r9, r24
 87e:	20 0d       	add	r18, r0
 880:	11 24       	eor	r1, r1
 882:	92 2e       	mov	r9, r18
 884:	11 c0       	rjmp	.+34     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 886:	ea e0       	ldi	r30, 0x0A	; 10
 888:	2e 9e       	mul	r2, r30
 88a:	20 0d       	add	r18, r0
 88c:	11 24       	eor	r1, r1
 88e:	22 2e       	mov	r2, r18
 890:	f3 2d       	mov	r31, r3
 892:	f0 62       	ori	r31, 0x20	; 32
 894:	3f 2e       	mov	r3, r31
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 898:	8c 36       	cpi	r24, 0x6C	; 108
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 89c:	83 2d       	mov	r24, r3
 89e:	80 68       	ori	r24, 0x80	; 128
 8a0:	38 2e       	mov	r3, r24
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a4:	88 36       	cpi	r24, 0x68	; 104
 8a6:	41 f4       	brne	.+16     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8a8:	f7 01       	movw	r30, r14
 8aa:	93 fd       	sbrc	r25, 3
 8ac:	85 91       	lpm	r24, Z+
 8ae:	93 ff       	sbrs	r25, 3
 8b0:	81 91       	ld	r24, Z+
 8b2:	7f 01       	movw	r14, r30
 8b4:	81 11       	cpse	r24, r1
 8b6:	b3 cf       	rjmp	.-154    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 8b8:	98 2f       	mov	r25, r24
 8ba:	9f 7d       	andi	r25, 0xDF	; 223
 8bc:	95 54       	subi	r25, 0x45	; 69
 8be:	93 30       	cpi	r25, 0x03	; 3
 8c0:	28 f4       	brcc	.+10     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	9f e3       	ldi	r25, 0x3F	; 63
 8c8:	99 83       	std	Y+1, r25	; 0x01
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8cc:	83 36       	cpi	r24, 0x63	; 99
 8ce:	31 f0       	breq	.+12     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d0:	83 37       	cpi	r24, 0x73	; 115
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8d4:	83 35       	cpi	r24, 0x53	; 83
 8d6:	09 f0       	breq	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d8:	59 c0       	rjmp	.+178    	; 0x98c <__stack+0x8d>
 8da:	21 c0       	rjmp	.+66     	; 0x91e <__stack+0x1f>
 8dc:	f8 01       	movw	r30, r16
 8de:	80 81       	ld	r24, Z
 8e0:	89 83       	std	Y+1, r24	; 0x01
 8e2:	0e 5f       	subi	r16, 0xFE	; 254
 8e4:	1f 4f       	sbci	r17, 0xFF	; 255
 8e6:	88 24       	eor	r8, r8
 8e8:	83 94       	inc	r8
 8ea:	91 2c       	mov	r9, r1
 8ec:	53 01       	movw	r10, r6
 8ee:	13 c0       	rjmp	.+38     	; 0x916 <__stack+0x17>
 8f0:	28 01       	movw	r4, r16
 8f2:	f2 e0       	ldi	r31, 0x02	; 2
 8f4:	4f 0e       	add	r4, r31
 8f6:	51 1c       	adc	r5, r1
 8f8:	f8 01       	movw	r30, r16
 8fa:	a0 80       	ld	r10, Z
 8fc:	b1 80       	ldd	r11, Z+1	; 0x01
 8fe:	36 fe       	sbrs	r3, 6
 900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
 902:	69 2d       	mov	r22, r9
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
 908:	6f ef       	ldi	r22, 0xFF	; 255
 90a:	7f ef       	ldi	r23, 0xFF	; 255
 90c:	c5 01       	movw	r24, r10
 90e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strnlen>
 912:	4c 01       	movw	r8, r24
 914:	82 01       	movw	r16, r4
 916:	f3 2d       	mov	r31, r3
 918:	ff 77       	andi	r31, 0x7F	; 127
 91a:	3f 2e       	mov	r3, r31
 91c:	16 c0       	rjmp	.+44     	; 0x94a <__stack+0x4b>
 91e:	28 01       	movw	r4, r16
 920:	22 e0       	ldi	r18, 0x02	; 2
 922:	42 0e       	add	r4, r18
 924:	51 1c       	adc	r5, r1
 926:	f8 01       	movw	r30, r16
 928:	a0 80       	ld	r10, Z
 92a:	b1 80       	ldd	r11, Z+1	; 0x01
 92c:	36 fe       	sbrs	r3, 6
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	69 2d       	mov	r22, r9
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0x3b>
 936:	6f ef       	ldi	r22, 0xFF	; 255
 938:	7f ef       	ldi	r23, 0xFF	; 255
 93a:	c5 01       	movw	r24, r10
 93c:	0e 94 c2 05 	call	0xb84	; 0xb84 <strnlen_P>
 940:	4c 01       	movw	r8, r24
 942:	f3 2d       	mov	r31, r3
 944:	f0 68       	ori	r31, 0x80	; 128
 946:	3f 2e       	mov	r3, r31
 948:	82 01       	movw	r16, r4
 94a:	33 fc       	sbrc	r3, 3
 94c:	1b c0       	rjmp	.+54     	; 0x984 <__stack+0x85>
 94e:	82 2d       	mov	r24, r2
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	88 16       	cp	r8, r24
 954:	99 06       	cpc	r9, r25
 956:	b0 f4       	brcc	.+44     	; 0x984 <__stack+0x85>
 958:	b6 01       	movw	r22, r12
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 962:	2a 94       	dec	r2
 964:	f4 cf       	rjmp	.-24     	; 0x94e <__stack+0x4f>
 966:	f5 01       	movw	r30, r10
 968:	37 fc       	sbrc	r3, 7
 96a:	85 91       	lpm	r24, Z+
 96c:	37 fe       	sbrs	r3, 7
 96e:	81 91       	ld	r24, Z+
 970:	5f 01       	movw	r10, r30
 972:	b6 01       	movw	r22, r12
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 97a:	21 10       	cpse	r2, r1
 97c:	2a 94       	dec	r2
 97e:	21 e0       	ldi	r18, 0x01	; 1
 980:	82 1a       	sub	r8, r18
 982:	91 08       	sbc	r9, r1
 984:	81 14       	cp	r8, r1
 986:	91 04       	cpc	r9, r1
 988:	71 f7       	brne	.-36     	; 0x966 <__stack+0x67>
 98a:	e8 c0       	rjmp	.+464    	; 0xb5c <__stack+0x25d>
 98c:	84 36       	cpi	r24, 0x64	; 100
 98e:	11 f0       	breq	.+4      	; 0x994 <__stack+0x95>
 990:	89 36       	cpi	r24, 0x69	; 105
 992:	41 f5       	brne	.+80     	; 0x9e4 <__stack+0xe5>
 994:	f8 01       	movw	r30, r16
 996:	37 fe       	sbrs	r3, 7
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <__stack+0xa9>
 99a:	60 81       	ld	r22, Z
 99c:	71 81       	ldd	r23, Z+1	; 0x01
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	93 81       	ldd	r25, Z+3	; 0x03
 9a2:	0c 5f       	subi	r16, 0xFC	; 252
 9a4:	1f 4f       	sbci	r17, 0xFF	; 255
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__stack+0xb9>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	07 2e       	mov	r0, r23
 9ae:	00 0c       	add	r0, r0
 9b0:	88 0b       	sbc	r24, r24
 9b2:	99 0b       	sbc	r25, r25
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	f3 2d       	mov	r31, r3
 9ba:	ff 76       	andi	r31, 0x6F	; 111
 9bc:	3f 2e       	mov	r3, r31
 9be:	97 ff       	sbrs	r25, 7
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0xd5>
 9c2:	90 95       	com	r25
 9c4:	80 95       	com	r24
 9c6:	70 95       	com	r23
 9c8:	61 95       	neg	r22
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	f0 68       	ori	r31, 0x80	; 128
 9d2:	3f 2e       	mov	r3, r31
 9d4:	2a e0       	ldi	r18, 0x0A	; 10
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	a3 01       	movw	r20, r6
 9da:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 9de:	88 2e       	mov	r8, r24
 9e0:	86 18       	sub	r8, r6
 9e2:	45 c0       	rjmp	.+138    	; 0xa6e <__stack+0x16f>
 9e4:	85 37       	cpi	r24, 0x75	; 117
 9e6:	31 f4       	brne	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	23 2d       	mov	r18, r3
 9ea:	2f 7e       	andi	r18, 0xEF	; 239
 9ec:	b2 2e       	mov	r11, r18
 9ee:	2a e0       	ldi	r18, 0x0A	; 10
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	25 c0       	rjmp	.+74     	; 0xa3e <__stack+0x13f>
 9f4:	93 2d       	mov	r25, r3
 9f6:	99 7f       	andi	r25, 0xF9	; 249
 9f8:	b9 2e       	mov	r11, r25
 9fa:	8f 36       	cpi	r24, 0x6F	; 111
 9fc:	c1 f0       	breq	.+48     	; 0xa2e <__stack+0x12f>
 9fe:	18 f4       	brcc	.+6      	; 0xa06 <__stack+0x107>
 a00:	88 35       	cpi	r24, 0x58	; 88
 a02:	79 f0       	breq	.+30     	; 0xa22 <__stack+0x123>
 a04:	b5 c0       	rjmp	.+362    	; 0xb70 <__stack+0x271>
 a06:	80 37       	cpi	r24, 0x70	; 112
 a08:	19 f0       	breq	.+6      	; 0xa10 <__stack+0x111>
 a0a:	88 37       	cpi	r24, 0x78	; 120
 a0c:	21 f0       	breq	.+8      	; 0xa16 <__stack+0x117>
 a0e:	b0 c0       	rjmp	.+352    	; 0xb70 <__stack+0x271>
 a10:	e9 2f       	mov	r30, r25
 a12:	e0 61       	ori	r30, 0x10	; 16
 a14:	be 2e       	mov	r11, r30
 a16:	b4 fe       	sbrs	r11, 4
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <__stack+0x135>
 a1a:	fb 2d       	mov	r31, r11
 a1c:	f4 60       	ori	r31, 0x04	; 4
 a1e:	bf 2e       	mov	r11, r31
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <__stack+0x135>
 a22:	34 fe       	sbrs	r3, 4
 a24:	0a c0       	rjmp	.+20     	; 0xa3a <__stack+0x13b>
 a26:	29 2f       	mov	r18, r25
 a28:	26 60       	ori	r18, 0x06	; 6
 a2a:	b2 2e       	mov	r11, r18
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x13b>
 a2e:	28 e0       	ldi	r18, 0x08	; 8
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <__stack+0x13f>
 a34:	20 e1       	ldi	r18, 0x10	; 16
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	20 e1       	ldi	r18, 0x10	; 16
 a3c:	32 e0       	ldi	r19, 0x02	; 2
 a3e:	f8 01       	movw	r30, r16
 a40:	b7 fe       	sbrs	r11, 7
 a42:	07 c0       	rjmp	.+14     	; 0xa52 <__stack+0x153>
 a44:	60 81       	ld	r22, Z
 a46:	71 81       	ldd	r23, Z+1	; 0x01
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	0c 5f       	subi	r16, 0xFC	; 252
 a4e:	1f 4f       	sbci	r17, 0xFF	; 255
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <__stack+0x15f>
 a52:	60 81       	ld	r22, Z
 a54:	71 81       	ldd	r23, Z+1	; 0x01
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 5f       	subi	r16, 0xFE	; 254
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	a3 01       	movw	r20, r6
 a60:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 a64:	88 2e       	mov	r8, r24
 a66:	86 18       	sub	r8, r6
 a68:	fb 2d       	mov	r31, r11
 a6a:	ff 77       	andi	r31, 0x7F	; 127
 a6c:	3f 2e       	mov	r3, r31
 a6e:	36 fe       	sbrs	r3, 6
 a70:	0d c0       	rjmp	.+26     	; 0xa8c <__stack+0x18d>
 a72:	23 2d       	mov	r18, r3
 a74:	2e 7f       	andi	r18, 0xFE	; 254
 a76:	a2 2e       	mov	r10, r18
 a78:	89 14       	cp	r8, r9
 a7a:	58 f4       	brcc	.+22     	; 0xa92 <__stack+0x193>
 a7c:	34 fe       	sbrs	r3, 4
 a7e:	0b c0       	rjmp	.+22     	; 0xa96 <__stack+0x197>
 a80:	32 fc       	sbrc	r3, 2
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <__stack+0x197>
 a84:	83 2d       	mov	r24, r3
 a86:	8e 7e       	andi	r24, 0xEE	; 238
 a88:	a8 2e       	mov	r10, r24
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__stack+0x197>
 a8c:	b8 2c       	mov	r11, r8
 a8e:	a3 2c       	mov	r10, r3
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <__stack+0x199>
 a92:	b8 2c       	mov	r11, r8
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <__stack+0x199>
 a96:	b9 2c       	mov	r11, r9
 a98:	a4 fe       	sbrs	r10, 4
 a9a:	0f c0       	rjmp	.+30     	; 0xaba <__stack+0x1bb>
 a9c:	fe 01       	movw	r30, r28
 a9e:	e8 0d       	add	r30, r8
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 81       	ld	r24, Z
 aa4:	80 33       	cpi	r24, 0x30	; 48
 aa6:	21 f4       	brne	.+8      	; 0xab0 <__stack+0x1b1>
 aa8:	9a 2d       	mov	r25, r10
 aaa:	99 7e       	andi	r25, 0xE9	; 233
 aac:	a9 2e       	mov	r10, r25
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <__stack+0x1c3>
 ab0:	a2 fe       	sbrs	r10, 2
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__stack+0x1c1>
 ab4:	b3 94       	inc	r11
 ab6:	b3 94       	inc	r11
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__stack+0x1c3>
 aba:	8a 2d       	mov	r24, r10
 abc:	86 78       	andi	r24, 0x86	; 134
 abe:	09 f0       	breq	.+2      	; 0xac2 <__stack+0x1c3>
 ac0:	b3 94       	inc	r11
 ac2:	a3 fc       	sbrc	r10, 3
 ac4:	11 c0       	rjmp	.+34     	; 0xae8 <__stack+0x1e9>
 ac6:	a0 fe       	sbrs	r10, 0
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <__stack+0x1d7>
 aca:	b2 14       	cp	r11, r2
 acc:	88 f4       	brcc	.+34     	; 0xaf0 <__stack+0x1f1>
 ace:	28 0c       	add	r2, r8
 ad0:	92 2c       	mov	r9, r2
 ad2:	9b 18       	sub	r9, r11
 ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <__stack+0x1f3>
 ad6:	b2 14       	cp	r11, r2
 ad8:	60 f4       	brcc	.+24     	; 0xaf2 <__stack+0x1f3>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e2       	ldi	r24, 0x20	; 32
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 ae4:	b3 94       	inc	r11
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <__stack+0x1d7>
 ae8:	b2 14       	cp	r11, r2
 aea:	18 f4       	brcc	.+6      	; 0xaf2 <__stack+0x1f3>
 aec:	2b 18       	sub	r2, r11
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__stack+0x1f5>
 af0:	98 2c       	mov	r9, r8
 af2:	21 2c       	mov	r2, r1
 af4:	a4 fe       	sbrs	r10, 4
 af6:	10 c0       	rjmp	.+32     	; 0xb18 <__stack+0x219>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e3       	ldi	r24, 0x30	; 48
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b02:	a2 fe       	sbrs	r10, 2
 b04:	17 c0       	rjmp	.+46     	; 0xb34 <__stack+0x235>
 b06:	a1 fc       	sbrc	r10, 1
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <__stack+0x211>
 b0a:	88 e7       	ldi	r24, 0x78	; 120
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <__stack+0x215>
 b10:	88 e5       	ldi	r24, 0x58	; 88
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	b6 01       	movw	r22, r12
 b16:	0c c0       	rjmp	.+24     	; 0xb30 <__stack+0x231>
 b18:	8a 2d       	mov	r24, r10
 b1a:	86 78       	andi	r24, 0x86	; 134
 b1c:	59 f0       	breq	.+22     	; 0xb34 <__stack+0x235>
 b1e:	a1 fe       	sbrs	r10, 1
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x227>
 b22:	8b e2       	ldi	r24, 0x2B	; 43
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <__stack+0x229>
 b26:	80 e2       	ldi	r24, 0x20	; 32
 b28:	a7 fc       	sbrc	r10, 7
 b2a:	8d e2       	ldi	r24, 0x2D	; 45
 b2c:	b6 01       	movw	r22, r12
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b34:	89 14       	cp	r8, r9
 b36:	38 f4       	brcc	.+14     	; 0xb46 <__stack+0x247>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e3       	ldi	r24, 0x30	; 48
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b42:	9a 94       	dec	r9
 b44:	f7 cf       	rjmp	.-18     	; 0xb34 <__stack+0x235>
 b46:	8a 94       	dec	r8
 b48:	f3 01       	movw	r30, r6
 b4a:	e8 0d       	add	r30, r8
 b4c:	f1 1d       	adc	r31, r1
 b4e:	80 81       	ld	r24, Z
 b50:	b6 01       	movw	r22, r12
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b58:	81 10       	cpse	r8, r1
 b5a:	f5 cf       	rjmp	.-22     	; 0xb46 <__stack+0x247>
 b5c:	22 20       	and	r2, r2
 b5e:	09 f4       	brne	.+2      	; 0xb62 <__stack+0x263>
 b60:	42 ce       	rjmp	.-892    	; 0x7e6 <vfprintf+0x24>
 b62:	b6 01       	movw	r22, r12
 b64:	80 e2       	ldi	r24, 0x20	; 32
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b6c:	2a 94       	dec	r2
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <__stack+0x25d>
 b70:	f6 01       	movw	r30, r12
 b72:	86 81       	ldd	r24, Z+6	; 0x06
 b74:	97 81       	ldd	r25, Z+7	; 0x07
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <__stack+0x27d>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
 b7c:	2b 96       	adiw	r28, 0x0b	; 11
 b7e:	e2 e1       	ldi	r30, 0x12	; 18
 b80:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__epilogue_restores__>

00000b84 <strnlen_P>:
 b84:	fc 01       	movw	r30, r24
 b86:	05 90       	lpm	r0, Z+
 b88:	61 50       	subi	r22, 0x01	; 1
 b8a:	70 40       	sbci	r23, 0x00	; 0
 b8c:	01 10       	cpse	r0, r1
 b8e:	d8 f7       	brcc	.-10     	; 0xb86 <strnlen_P+0x2>
 b90:	80 95       	com	r24
 b92:	90 95       	com	r25
 b94:	8e 0f       	add	r24, r30
 b96:	9f 1f       	adc	r25, r31
 b98:	08 95       	ret

00000b9a <strnlen>:
 b9a:	fc 01       	movw	r30, r24
 b9c:	61 50       	subi	r22, 0x01	; 1
 b9e:	70 40       	sbci	r23, 0x00	; 0
 ba0:	01 90       	ld	r0, Z+
 ba2:	01 10       	cpse	r0, r1
 ba4:	d8 f7       	brcc	.-10     	; 0xb9c <strnlen+0x2>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	8e 0f       	add	r24, r30
 bac:	9f 1f       	adc	r25, r31
 bae:	08 95       	ret

00000bb0 <fputc>:
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	fb 01       	movw	r30, r22
 bba:	23 81       	ldd	r18, Z+3	; 0x03
 bbc:	21 fd       	sbrc	r18, 1
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <fputc+0x16>
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
 bc2:	9f ef       	ldi	r25, 0xFF	; 255
 bc4:	2c c0       	rjmp	.+88     	; 0xc1e <fputc+0x6e>
 bc6:	22 ff       	sbrs	r18, 2
 bc8:	16 c0       	rjmp	.+44     	; 0xbf6 <fputc+0x46>
 bca:	46 81       	ldd	r20, Z+6	; 0x06
 bcc:	57 81       	ldd	r21, Z+7	; 0x07
 bce:	24 81       	ldd	r18, Z+4	; 0x04
 bd0:	35 81       	ldd	r19, Z+5	; 0x05
 bd2:	42 17       	cp	r20, r18
 bd4:	53 07       	cpc	r21, r19
 bd6:	44 f4       	brge	.+16     	; 0xbe8 <fputc+0x38>
 bd8:	a0 81       	ld	r26, Z
 bda:	b1 81       	ldd	r27, Z+1	; 0x01
 bdc:	9d 01       	movw	r18, r26
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	31 83       	std	Z+1, r19	; 0x01
 be4:	20 83       	st	Z, r18
 be6:	8c 93       	st	X, r24
 be8:	26 81       	ldd	r18, Z+6	; 0x06
 bea:	37 81       	ldd	r19, Z+7	; 0x07
 bec:	2f 5f       	subi	r18, 0xFF	; 255
 bee:	3f 4f       	sbci	r19, 0xFF	; 255
 bf0:	37 83       	std	Z+7, r19	; 0x07
 bf2:	26 83       	std	Z+6, r18	; 0x06
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <fputc+0x6e>
 bf6:	8b 01       	movw	r16, r22
 bf8:	ec 01       	movw	r28, r24
 bfa:	fb 01       	movw	r30, r22
 bfc:	00 84       	ldd	r0, Z+8	; 0x08
 bfe:	f1 85       	ldd	r31, Z+9	; 0x09
 c00:	e0 2d       	mov	r30, r0
 c02:	09 95       	icall
 c04:	89 2b       	or	r24, r25
 c06:	e1 f6       	brne	.-72     	; 0xbc0 <fputc+0x10>
 c08:	d8 01       	movw	r26, r16
 c0a:	16 96       	adiw	r26, 0x06	; 6
 c0c:	8d 91       	ld	r24, X+
 c0e:	9c 91       	ld	r25, X
 c10:	17 97       	sbiw	r26, 0x07	; 7
 c12:	01 96       	adiw	r24, 0x01	; 1
 c14:	17 96       	adiw	r26, 0x07	; 7
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	16 97       	sbiw	r26, 0x06	; 6
 c1c:	ce 01       	movw	r24, r28
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	08 95       	ret

00000c28 <__ultoa_invert>:
 c28:	fa 01       	movw	r30, r20
 c2a:	aa 27       	eor	r26, r26
 c2c:	28 30       	cpi	r18, 0x08	; 8
 c2e:	51 f1       	breq	.+84     	; 0xc84 <__ultoa_invert+0x5c>
 c30:	20 31       	cpi	r18, 0x10	; 16
 c32:	81 f1       	breq	.+96     	; 0xc94 <__ultoa_invert+0x6c>
 c34:	e8 94       	clt
 c36:	6f 93       	push	r22
 c38:	6e 7f       	andi	r22, 0xFE	; 254
 c3a:	6e 5f       	subi	r22, 0xFE	; 254
 c3c:	7f 4f       	sbci	r23, 0xFF	; 255
 c3e:	8f 4f       	sbci	r24, 0xFF	; 255
 c40:	9f 4f       	sbci	r25, 0xFF	; 255
 c42:	af 4f       	sbci	r26, 0xFF	; 255
 c44:	b1 e0       	ldi	r27, 0x01	; 1
 c46:	3e d0       	rcall	.+124    	; 0xcc4 <__ultoa_invert+0x9c>
 c48:	b4 e0       	ldi	r27, 0x04	; 4
 c4a:	3c d0       	rcall	.+120    	; 0xcc4 <__ultoa_invert+0x9c>
 c4c:	67 0f       	add	r22, r23
 c4e:	78 1f       	adc	r23, r24
 c50:	89 1f       	adc	r24, r25
 c52:	9a 1f       	adc	r25, r26
 c54:	a1 1d       	adc	r26, r1
 c56:	68 0f       	add	r22, r24
 c58:	79 1f       	adc	r23, r25
 c5a:	8a 1f       	adc	r24, r26
 c5c:	91 1d       	adc	r25, r1
 c5e:	a1 1d       	adc	r26, r1
 c60:	6a 0f       	add	r22, r26
 c62:	71 1d       	adc	r23, r1
 c64:	81 1d       	adc	r24, r1
 c66:	91 1d       	adc	r25, r1
 c68:	a1 1d       	adc	r26, r1
 c6a:	20 d0       	rcall	.+64     	; 0xcac <__ultoa_invert+0x84>
 c6c:	09 f4       	brne	.+2      	; 0xc70 <__ultoa_invert+0x48>
 c6e:	68 94       	set
 c70:	3f 91       	pop	r19
 c72:	2a e0       	ldi	r18, 0x0A	; 10
 c74:	26 9f       	mul	r18, r22
 c76:	11 24       	eor	r1, r1
 c78:	30 19       	sub	r19, r0
 c7a:	30 5d       	subi	r19, 0xD0	; 208
 c7c:	31 93       	st	Z+, r19
 c7e:	de f6       	brtc	.-74     	; 0xc36 <__ultoa_invert+0xe>
 c80:	cf 01       	movw	r24, r30
 c82:	08 95       	ret
 c84:	46 2f       	mov	r20, r22
 c86:	47 70       	andi	r20, 0x07	; 7
 c88:	40 5d       	subi	r20, 0xD0	; 208
 c8a:	41 93       	st	Z+, r20
 c8c:	b3 e0       	ldi	r27, 0x03	; 3
 c8e:	0f d0       	rcall	.+30     	; 0xcae <__ultoa_invert+0x86>
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0x5c>
 c92:	f6 cf       	rjmp	.-20     	; 0xc80 <__ultoa_invert+0x58>
 c94:	46 2f       	mov	r20, r22
 c96:	4f 70       	andi	r20, 0x0F	; 15
 c98:	40 5d       	subi	r20, 0xD0	; 208
 c9a:	4a 33       	cpi	r20, 0x3A	; 58
 c9c:	18 f0       	brcs	.+6      	; 0xca4 <__ultoa_invert+0x7c>
 c9e:	49 5d       	subi	r20, 0xD9	; 217
 ca0:	31 fd       	sbrc	r19, 1
 ca2:	40 52       	subi	r20, 0x20	; 32
 ca4:	41 93       	st	Z+, r20
 ca6:	02 d0       	rcall	.+4      	; 0xcac <__ultoa_invert+0x84>
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__ultoa_invert+0x6c>
 caa:	ea cf       	rjmp	.-44     	; 0xc80 <__ultoa_invert+0x58>
 cac:	b4 e0       	ldi	r27, 0x04	; 4
 cae:	a6 95       	lsr	r26
 cb0:	97 95       	ror	r25
 cb2:	87 95       	ror	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	ba 95       	dec	r27
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0x86>
 cbc:	00 97       	sbiw	r24, 0x00	; 0
 cbe:	61 05       	cpc	r22, r1
 cc0:	71 05       	cpc	r23, r1
 cc2:	08 95       	ret
 cc4:	9b 01       	movw	r18, r22
 cc6:	ac 01       	movw	r20, r24
 cc8:	0a 2e       	mov	r0, r26
 cca:	06 94       	lsr	r0
 ccc:	57 95       	ror	r21
 cce:	47 95       	ror	r20
 cd0:	37 95       	ror	r19
 cd2:	27 95       	ror	r18
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0xa2>
 cd8:	62 0f       	add	r22, r18
 cda:	73 1f       	adc	r23, r19
 cdc:	84 1f       	adc	r24, r20
 cde:	95 1f       	adc	r25, r21
 ce0:	a0 1d       	adc	r26, r0
 ce2:	08 95       	ret

00000ce4 <__prologue_saves__>:
 ce4:	2f 92       	push	r2
 ce6:	3f 92       	push	r3
 ce8:	4f 92       	push	r4
 cea:	5f 92       	push	r5
 cec:	6f 92       	push	r6
 cee:	7f 92       	push	r7
 cf0:	8f 92       	push	r8
 cf2:	9f 92       	push	r9
 cf4:	af 92       	push	r10
 cf6:	bf 92       	push	r11
 cf8:	cf 92       	push	r12
 cfa:	df 92       	push	r13
 cfc:	ef 92       	push	r14
 cfe:	ff 92       	push	r15
 d00:	0f 93       	push	r16
 d02:	1f 93       	push	r17
 d04:	cf 93       	push	r28
 d06:	df 93       	push	r29
 d08:	cd b7       	in	r28, 0x3d	; 61
 d0a:	de b7       	in	r29, 0x3e	; 62
 d0c:	ca 1b       	sub	r28, r26
 d0e:	db 0b       	sbc	r29, r27
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	09 94       	ijmp

00000d1c <__epilogue_restores__>:
 d1c:	2a 88       	ldd	r2, Y+18	; 0x12
 d1e:	39 88       	ldd	r3, Y+17	; 0x11
 d20:	48 88       	ldd	r4, Y+16	; 0x10
 d22:	5f 84       	ldd	r5, Y+15	; 0x0f
 d24:	6e 84       	ldd	r6, Y+14	; 0x0e
 d26:	7d 84       	ldd	r7, Y+13	; 0x0d
 d28:	8c 84       	ldd	r8, Y+12	; 0x0c
 d2a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d2c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d2e:	b9 84       	ldd	r11, Y+9	; 0x09
 d30:	c8 84       	ldd	r12, Y+8	; 0x08
 d32:	df 80       	ldd	r13, Y+7	; 0x07
 d34:	ee 80       	ldd	r14, Y+6	; 0x06
 d36:	fd 80       	ldd	r15, Y+5	; 0x05
 d38:	0c 81       	ldd	r16, Y+4	; 0x04
 d3a:	1b 81       	ldd	r17, Y+3	; 0x03
 d3c:	aa 81       	ldd	r26, Y+2	; 0x02
 d3e:	b9 81       	ldd	r27, Y+1	; 0x01
 d40:	ce 0f       	add	r28, r30
 d42:	d1 1d       	adc	r29, r1
 d44:	0f b6       	in	r0, 0x3f	; 63
 d46:	f8 94       	cli
 d48:	de bf       	out	0x3e, r29	; 62
 d4a:	0f be       	out	0x3f, r0	; 63
 d4c:	cd bf       	out	0x3d, r28	; 61
 d4e:	ed 01       	movw	r28, r26
 d50:	08 95       	ret

00000d52 <_exit>:
 d52:	f8 94       	cli

00000d54 <__stop_program>:
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <__stop_program>
